//
// Autogenerated by Thrift Compiler (0.9.2)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


Entry = function(args) {
  this.name = null;
  this.measuredProperties = {
};
  this.predictedProperties = {
};
  this.classProbs = {
};
  if (args) {
    if (args.name !== undefined) {
      this.name = args.name;
    }
    if (args.measuredProperties !== undefined) {
      this.measuredProperties = args.measuredProperties;
    }
    if (args.predictedProperties !== undefined) {
      this.predictedProperties = args.predictedProperties;
    }
    if (args.classProbs !== undefined) {
      this.classProbs = args.classProbs;
    }
  }
};
Entry.prototype = {};
Entry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.measuredProperties = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          if (_i5 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key6 = null;
          var val7 = null;
          key6 = input.readString().value;
          val7 = input.readDouble().value;
          this.measuredProperties[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size8 = 0;
        var _rtmp312;
        this.predictedProperties = {};
        var _ktype9 = 0;
        var _vtype10 = 0;
        _rtmp312 = input.readMapBegin();
        _ktype9 = _rtmp312.ktype;
        _vtype10 = _rtmp312.vtype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          if (_i13 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key14 = null;
          var val15 = null;
          key14 = input.readString().value;
          val15 = input.readDouble().value;
          this.predictedProperties[key14] = val15;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size16 = 0;
        var _rtmp320;
        this.classProbs = {};
        var _ktype17 = 0;
        var _vtype18 = 0;
        _rtmp320 = input.readMapBegin();
        _ktype17 = _rtmp320.ktype;
        _vtype18 = _rtmp320.vtype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          if (_i21 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key22 = null;
          var val23 = null;
          key22 = input.readString().value;
          var _size24 = 0;
          var _rtmp328;
          val23 = [];
          var _etype27 = 0;
          _rtmp328 = input.readListBegin();
          _etype27 = _rtmp328.etype;
          _size24 = _rtmp328.size;
          for (var _i29 = 0; _i29 < _size24; ++_i29)
          {
            var elem30 = null;
            elem30 = input.readDouble().value;
            val23.push(elem30);
          }
          input.readListEnd();
          this.classProbs[key22] = val23;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Entry.prototype.write = function(output) {
  output.writeStructBegin('Entry');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.measuredProperties !== null && this.measuredProperties !== undefined) {
    output.writeFieldBegin('measuredProperties', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.DOUBLE, Thrift.objectLength(this.measuredProperties));
    for (var kiter31 in this.measuredProperties)
    {
      if (this.measuredProperties.hasOwnProperty(kiter31))
      {
        var viter32 = this.measuredProperties[kiter31];
        output.writeString(kiter31);
        output.writeDouble(viter32);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.predictedProperties !== null && this.predictedProperties !== undefined) {
    output.writeFieldBegin('predictedProperties', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.DOUBLE, Thrift.objectLength(this.predictedProperties));
    for (var kiter33 in this.predictedProperties)
    {
      if (this.predictedProperties.hasOwnProperty(kiter33))
      {
        var viter34 = this.predictedProperties[kiter33];
        output.writeString(kiter33);
        output.writeDouble(viter34);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.classProbs !== null && this.classProbs !== undefined) {
    output.writeFieldBegin('classProbs', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.classProbs));
    for (var kiter35 in this.classProbs)
    {
      if (this.classProbs.hasOwnProperty(kiter35))
      {
        var viter36 = this.classProbs[kiter35];
        output.writeString(kiter35);
        output.writeListBegin(Thrift.Type.DOUBLE, viter36.length);
        for (var iter37 in viter36)
        {
          if (viter36.hasOwnProperty(iter37))
          {
            iter37 = viter36[iter37];
            output.writeDouble(iter37);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ModelInfo = function(args) {
  this.property = null;
  this.units = null;
  this.author = null;
  this.training = null;
  this.citation = null;
  this.notes = null;
  this.dataType = null;
  this.modelType = null;
  this.classifier = null;
  this.valScore = null;
  this.description = null;
  this.valMethod = null;
  this.trainTime = null;
  if (args) {
    if (args.property !== undefined) {
      this.property = args.property;
    }
    if (args.units !== undefined) {
      this.units = args.units;
    }
    if (args.author !== undefined) {
      this.author = args.author;
    }
    if (args.training !== undefined) {
      this.training = args.training;
    }
    if (args.citation !== undefined) {
      this.citation = args.citation;
    }
    if (args.notes !== undefined) {
      this.notes = args.notes;
    }
    if (args.dataType !== undefined) {
      this.dataType = args.dataType;
    }
    if (args.modelType !== undefined) {
      this.modelType = args.modelType;
    }
    if (args.classifier !== undefined) {
      this.classifier = args.classifier;
    }
    if (args.valScore !== undefined) {
      this.valScore = args.valScore;
    }
    if (args.description !== undefined) {
      this.description = args.description;
    }
    if (args.valMethod !== undefined) {
      this.valMethod = args.valMethod;
    }
    if (args.trainTime !== undefined) {
      this.trainTime = args.trainTime;
    }
  }
};
ModelInfo.prototype = {};
ModelInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.property = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.units = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.author = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.training = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.citation = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.notes = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.dataType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.modelType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.classifier = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.MAP) {
        var _size38 = 0;
        var _rtmp342;
        this.valScore = {};
        var _ktype39 = 0;
        var _vtype40 = 0;
        _rtmp342 = input.readMapBegin();
        _ktype39 = _rtmp342.ktype;
        _vtype40 = _rtmp342.vtype;
        _size38 = _rtmp342.size;
        for (var _i43 = 0; _i43 < _size38; ++_i43)
        {
          if (_i43 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key44 = null;
          var val45 = null;
          key44 = input.readString().value;
          val45 = input.readDouble().value;
          this.valScore[key44] = val45;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.valMethod = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.trainTime = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ModelInfo.prototype.write = function(output) {
  output.writeStructBegin('ModelInfo');
  if (this.property !== null && this.property !== undefined) {
    output.writeFieldBegin('property', Thrift.Type.STRING, 1);
    output.writeString(this.property);
    output.writeFieldEnd();
  }
  if (this.units !== null && this.units !== undefined) {
    output.writeFieldBegin('units', Thrift.Type.STRING, 2);
    output.writeString(this.units);
    output.writeFieldEnd();
  }
  if (this.author !== null && this.author !== undefined) {
    output.writeFieldBegin('author', Thrift.Type.STRING, 3);
    output.writeString(this.author);
    output.writeFieldEnd();
  }
  if (this.training !== null && this.training !== undefined) {
    output.writeFieldBegin('training', Thrift.Type.STRING, 4);
    output.writeString(this.training);
    output.writeFieldEnd();
  }
  if (this.citation !== null && this.citation !== undefined) {
    output.writeFieldBegin('citation', Thrift.Type.STRING, 5);
    output.writeString(this.citation);
    output.writeFieldEnd();
  }
  if (this.notes !== null && this.notes !== undefined) {
    output.writeFieldBegin('notes', Thrift.Type.STRING, 6);
    output.writeString(this.notes);
    output.writeFieldEnd();
  }
  if (this.dataType !== null && this.dataType !== undefined) {
    output.writeFieldBegin('dataType', Thrift.Type.STRING, 7);
    output.writeString(this.dataType);
    output.writeFieldEnd();
  }
  if (this.modelType !== null && this.modelType !== undefined) {
    output.writeFieldBegin('modelType', Thrift.Type.STRING, 8);
    output.writeString(this.modelType);
    output.writeFieldEnd();
  }
  if (this.classifier !== null && this.classifier !== undefined) {
    output.writeFieldBegin('classifier', Thrift.Type.BOOL, 9);
    output.writeBool(this.classifier);
    output.writeFieldEnd();
  }
  if (this.valScore !== null && this.valScore !== undefined) {
    output.writeFieldBegin('valScore', Thrift.Type.MAP, 10);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.DOUBLE, Thrift.objectLength(this.valScore));
    for (var kiter46 in this.valScore)
    {
      if (this.valScore.hasOwnProperty(kiter46))
      {
        var viter47 = this.valScore[kiter46];
        output.writeString(kiter46);
        output.writeDouble(viter47);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 11);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.valMethod !== null && this.valMethod !== undefined) {
    output.writeFieldBegin('valMethod', Thrift.Type.STRING, 12);
    output.writeString(this.valMethod);
    output.writeFieldEnd();
  }
  if (this.trainTime !== null && this.trainTime !== undefined) {
    output.writeFieldBegin('trainTime', Thrift.Type.STRING, 13);
    output.writeString(this.trainTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MagpieException = function(args) {
  this.why = null;
  if (args) {
    if (args.why !== undefined) {
      this.why = args.why;
    }
  }
};
Thrift.inherits(MagpieException, Thrift.TException);
MagpieException.prototype.name = 'MagpieException';
MagpieException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.why = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MagpieException.prototype.write = function(output) {
  output.writeStructBegin('MagpieException');
  if (this.why !== null && this.why !== undefined) {
    output.writeFieldBegin('why', Thrift.Type.STRING, 1);
    output.writeString(this.why);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

