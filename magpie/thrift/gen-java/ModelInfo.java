/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Holds all known information about a model
 * 
 * Known properties:
 *  author      : Name/contact info of author
 *  citation    : Citation information of the model
 *  classifier  : Whether this model is a classification (or regression) model
 *  dataType    : Type of data expected, defined by name of Magpie Dataset type
 *  description : Short description of this model
 *  modelType   : Simple description of model
 *  notes       : Any pertinent details about the model
 *  property    : Property being modeled
 *  training    : Description of training set
 *  trainTime   : When this model was trained (formatted string)
 *  units       : Units of prediction. (Classifiers) Name of classes, ";"-delimited
 *  valMethod   : Description of how this model was validated
 *  valScore    : Performance of model in cross-validation tests
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-1-12")
public class ModelInfo implements org.apache.thrift.TBase<ModelInfo, ModelInfo._Fields>, java.io.Serializable, Cloneable, Comparable<ModelInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ModelInfo");

  private static final org.apache.thrift.protocol.TField PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField("property", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField UNITS_FIELD_DESC = new org.apache.thrift.protocol.TField("units", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("author", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TRAINING_FIELD_DESC = new org.apache.thrift.protocol.TField("training", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CITATION_FIELD_DESC = new org.apache.thrift.protocol.TField("citation", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NOTES_FIELD_DESC = new org.apache.thrift.protocol.TField("notes", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DATA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("dataType", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField MODEL_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("modelType", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CLASSIFIER_FIELD_DESC = new org.apache.thrift.protocol.TField("classifier", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField VAL_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("valScore", org.apache.thrift.protocol.TType.MAP, (short)10);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField VAL_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("valMethod", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField TRAIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("trainTime", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ModelInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ModelInfoTupleSchemeFactory());
  }

  public String property; // required
  public String units; // required
  public String author; // required
  public String training; // required
  public String citation; // required
  public String notes; // required
  public String dataType; // required
  public String modelType; // required
  public boolean classifier; // required
  public Map<String,Double> valScore; // required
  public String description; // required
  public String valMethod; // required
  public String trainTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PROPERTY((short)1, "property"),
    UNITS((short)2, "units"),
    AUTHOR((short)3, "author"),
    TRAINING((short)4, "training"),
    CITATION((short)5, "citation"),
    NOTES((short)6, "notes"),
    DATA_TYPE((short)7, "dataType"),
    MODEL_TYPE((short)8, "modelType"),
    CLASSIFIER((short)9, "classifier"),
    VAL_SCORE((short)10, "valScore"),
    DESCRIPTION((short)11, "description"),
    VAL_METHOD((short)12, "valMethod"),
    TRAIN_TIME((short)13, "trainTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PROPERTY
          return PROPERTY;
        case 2: // UNITS
          return UNITS;
        case 3: // AUTHOR
          return AUTHOR;
        case 4: // TRAINING
          return TRAINING;
        case 5: // CITATION
          return CITATION;
        case 6: // NOTES
          return NOTES;
        case 7: // DATA_TYPE
          return DATA_TYPE;
        case 8: // MODEL_TYPE
          return MODEL_TYPE;
        case 9: // CLASSIFIER
          return CLASSIFIER;
        case 10: // VAL_SCORE
          return VAL_SCORE;
        case 11: // DESCRIPTION
          return DESCRIPTION;
        case 12: // VAL_METHOD
          return VAL_METHOD;
        case 13: // TRAIN_TIME
          return TRAIN_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CLASSIFIER_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PROPERTY, new org.apache.thrift.meta_data.FieldMetaData("property", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNITS, new org.apache.thrift.meta_data.FieldMetaData("units", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("author", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRAINING, new org.apache.thrift.meta_data.FieldMetaData("training", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITATION, new org.apache.thrift.meta_data.FieldMetaData("citation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTES, new org.apache.thrift.meta_data.FieldMetaData("notes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("dataType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MODEL_TYPE, new org.apache.thrift.meta_data.FieldMetaData("modelType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLASSIFIER, new org.apache.thrift.meta_data.FieldMetaData("classifier", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.VAL_SCORE, new org.apache.thrift.meta_data.FieldMetaData("valScore", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VAL_METHOD, new org.apache.thrift.meta_data.FieldMetaData("valMethod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TRAIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("trainTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ModelInfo.class, metaDataMap);
  }

  public ModelInfo() {
  }

  public ModelInfo(
    String property,
    String units,
    String author,
    String training,
    String citation,
    String notes,
    String dataType,
    String modelType,
    boolean classifier,
    Map<String,Double> valScore,
    String description,
    String valMethod,
    String trainTime)
  {
    this();
    this.property = property;
    this.units = units;
    this.author = author;
    this.training = training;
    this.citation = citation;
    this.notes = notes;
    this.dataType = dataType;
    this.modelType = modelType;
    this.classifier = classifier;
    setClassifierIsSet(true);
    this.valScore = valScore;
    this.description = description;
    this.valMethod = valMethod;
    this.trainTime = trainTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ModelInfo(ModelInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetProperty()) {
      this.property = other.property;
    }
    if (other.isSetUnits()) {
      this.units = other.units;
    }
    if (other.isSetAuthor()) {
      this.author = other.author;
    }
    if (other.isSetTraining()) {
      this.training = other.training;
    }
    if (other.isSetCitation()) {
      this.citation = other.citation;
    }
    if (other.isSetNotes()) {
      this.notes = other.notes;
    }
    if (other.isSetDataType()) {
      this.dataType = other.dataType;
    }
    if (other.isSetModelType()) {
      this.modelType = other.modelType;
    }
    this.classifier = other.classifier;
    if (other.isSetValScore()) {
      Map<String,Double> __this__valScore = new HashMap<String,Double>(other.valScore);
      this.valScore = __this__valScore;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetValMethod()) {
      this.valMethod = other.valMethod;
    }
    if (other.isSetTrainTime()) {
      this.trainTime = other.trainTime;
    }
  }

  public ModelInfo deepCopy() {
    return new ModelInfo(this);
  }

  @Override
  public void clear() {
    this.property = null;
    this.units = null;
    this.author = null;
    this.training = null;
    this.citation = null;
    this.notes = null;
    this.dataType = null;
    this.modelType = null;
    setClassifierIsSet(false);
    this.classifier = false;
    this.valScore = null;
    this.description = null;
    this.valMethod = null;
    this.trainTime = null;
  }

  public String getProperty() {
    return this.property;
  }

  public ModelInfo setProperty(String property) {
    this.property = property;
    return this;
  }

  public void unsetProperty() {
    this.property = null;
  }

  /** Returns true if field property is set (has been assigned a value) and false otherwise */
  public boolean isSetProperty() {
    return this.property != null;
  }

  public void setPropertyIsSet(boolean value) {
    if (!value) {
      this.property = null;
    }
  }

  public String getUnits() {
    return this.units;
  }

  public ModelInfo setUnits(String units) {
    this.units = units;
    return this;
  }

  public void unsetUnits() {
    this.units = null;
  }

  /** Returns true if field units is set (has been assigned a value) and false otherwise */
  public boolean isSetUnits() {
    return this.units != null;
  }

  public void setUnitsIsSet(boolean value) {
    if (!value) {
      this.units = null;
    }
  }

  public String getAuthor() {
    return this.author;
  }

  public ModelInfo setAuthor(String author) {
    this.author = author;
    return this;
  }

  public void unsetAuthor() {
    this.author = null;
  }

  /** Returns true if field author is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthor() {
    return this.author != null;
  }

  public void setAuthorIsSet(boolean value) {
    if (!value) {
      this.author = null;
    }
  }

  public String getTraining() {
    return this.training;
  }

  public ModelInfo setTraining(String training) {
    this.training = training;
    return this;
  }

  public void unsetTraining() {
    this.training = null;
  }

  /** Returns true if field training is set (has been assigned a value) and false otherwise */
  public boolean isSetTraining() {
    return this.training != null;
  }

  public void setTrainingIsSet(boolean value) {
    if (!value) {
      this.training = null;
    }
  }

  public String getCitation() {
    return this.citation;
  }

  public ModelInfo setCitation(String citation) {
    this.citation = citation;
    return this;
  }

  public void unsetCitation() {
    this.citation = null;
  }

  /** Returns true if field citation is set (has been assigned a value) and false otherwise */
  public boolean isSetCitation() {
    return this.citation != null;
  }

  public void setCitationIsSet(boolean value) {
    if (!value) {
      this.citation = null;
    }
  }

  public String getNotes() {
    return this.notes;
  }

  public ModelInfo setNotes(String notes) {
    this.notes = notes;
    return this;
  }

  public void unsetNotes() {
    this.notes = null;
  }

  /** Returns true if field notes is set (has been assigned a value) and false otherwise */
  public boolean isSetNotes() {
    return this.notes != null;
  }

  public void setNotesIsSet(boolean value) {
    if (!value) {
      this.notes = null;
    }
  }

  public String getDataType() {
    return this.dataType;
  }

  public ModelInfo setDataType(String dataType) {
    this.dataType = dataType;
    return this;
  }

  public void unsetDataType() {
    this.dataType = null;
  }

  /** Returns true if field dataType is set (has been assigned a value) and false otherwise */
  public boolean isSetDataType() {
    return this.dataType != null;
  }

  public void setDataTypeIsSet(boolean value) {
    if (!value) {
      this.dataType = null;
    }
  }

  public String getModelType() {
    return this.modelType;
  }

  public ModelInfo setModelType(String modelType) {
    this.modelType = modelType;
    return this;
  }

  public void unsetModelType() {
    this.modelType = null;
  }

  /** Returns true if field modelType is set (has been assigned a value) and false otherwise */
  public boolean isSetModelType() {
    return this.modelType != null;
  }

  public void setModelTypeIsSet(boolean value) {
    if (!value) {
      this.modelType = null;
    }
  }

  public boolean isClassifier() {
    return this.classifier;
  }

  public ModelInfo setClassifier(boolean classifier) {
    this.classifier = classifier;
    setClassifierIsSet(true);
    return this;
  }

  public void unsetClassifier() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CLASSIFIER_ISSET_ID);
  }

  /** Returns true if field classifier is set (has been assigned a value) and false otherwise */
  public boolean isSetClassifier() {
    return EncodingUtils.testBit(__isset_bitfield, __CLASSIFIER_ISSET_ID);
  }

  public void setClassifierIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CLASSIFIER_ISSET_ID, value);
  }

  public int getValScoreSize() {
    return (this.valScore == null) ? 0 : this.valScore.size();
  }

  public void putToValScore(String key, double val) {
    if (this.valScore == null) {
      this.valScore = new HashMap<String,Double>();
    }
    this.valScore.put(key, val);
  }

  public Map<String,Double> getValScore() {
    return this.valScore;
  }

  public ModelInfo setValScore(Map<String,Double> valScore) {
    this.valScore = valScore;
    return this;
  }

  public void unsetValScore() {
    this.valScore = null;
  }

  /** Returns true if field valScore is set (has been assigned a value) and false otherwise */
  public boolean isSetValScore() {
    return this.valScore != null;
  }

  public void setValScoreIsSet(boolean value) {
    if (!value) {
      this.valScore = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public ModelInfo setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getValMethod() {
    return this.valMethod;
  }

  public ModelInfo setValMethod(String valMethod) {
    this.valMethod = valMethod;
    return this;
  }

  public void unsetValMethod() {
    this.valMethod = null;
  }

  /** Returns true if field valMethod is set (has been assigned a value) and false otherwise */
  public boolean isSetValMethod() {
    return this.valMethod != null;
  }

  public void setValMethodIsSet(boolean value) {
    if (!value) {
      this.valMethod = null;
    }
  }

  public String getTrainTime() {
    return this.trainTime;
  }

  public ModelInfo setTrainTime(String trainTime) {
    this.trainTime = trainTime;
    return this;
  }

  public void unsetTrainTime() {
    this.trainTime = null;
  }

  /** Returns true if field trainTime is set (has been assigned a value) and false otherwise */
  public boolean isSetTrainTime() {
    return this.trainTime != null;
  }

  public void setTrainTimeIsSet(boolean value) {
    if (!value) {
      this.trainTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PROPERTY:
      if (value == null) {
        unsetProperty();
      } else {
        setProperty((String)value);
      }
      break;

    case UNITS:
      if (value == null) {
        unsetUnits();
      } else {
        setUnits((String)value);
      }
      break;

    case AUTHOR:
      if (value == null) {
        unsetAuthor();
      } else {
        setAuthor((String)value);
      }
      break;

    case TRAINING:
      if (value == null) {
        unsetTraining();
      } else {
        setTraining((String)value);
      }
      break;

    case CITATION:
      if (value == null) {
        unsetCitation();
      } else {
        setCitation((String)value);
      }
      break;

    case NOTES:
      if (value == null) {
        unsetNotes();
      } else {
        setNotes((String)value);
      }
      break;

    case DATA_TYPE:
      if (value == null) {
        unsetDataType();
      } else {
        setDataType((String)value);
      }
      break;

    case MODEL_TYPE:
      if (value == null) {
        unsetModelType();
      } else {
        setModelType((String)value);
      }
      break;

    case CLASSIFIER:
      if (value == null) {
        unsetClassifier();
      } else {
        setClassifier((Boolean)value);
      }
      break;

    case VAL_SCORE:
      if (value == null) {
        unsetValScore();
      } else {
        setValScore((Map<String,Double>)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case VAL_METHOD:
      if (value == null) {
        unsetValMethod();
      } else {
        setValMethod((String)value);
      }
      break;

    case TRAIN_TIME:
      if (value == null) {
        unsetTrainTime();
      } else {
        setTrainTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PROPERTY:
      return getProperty();

    case UNITS:
      return getUnits();

    case AUTHOR:
      return getAuthor();

    case TRAINING:
      return getTraining();

    case CITATION:
      return getCitation();

    case NOTES:
      return getNotes();

    case DATA_TYPE:
      return getDataType();

    case MODEL_TYPE:
      return getModelType();

    case CLASSIFIER:
      return Boolean.valueOf(isClassifier());

    case VAL_SCORE:
      return getValScore();

    case DESCRIPTION:
      return getDescription();

    case VAL_METHOD:
      return getValMethod();

    case TRAIN_TIME:
      return getTrainTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PROPERTY:
      return isSetProperty();
    case UNITS:
      return isSetUnits();
    case AUTHOR:
      return isSetAuthor();
    case TRAINING:
      return isSetTraining();
    case CITATION:
      return isSetCitation();
    case NOTES:
      return isSetNotes();
    case DATA_TYPE:
      return isSetDataType();
    case MODEL_TYPE:
      return isSetModelType();
    case CLASSIFIER:
      return isSetClassifier();
    case VAL_SCORE:
      return isSetValScore();
    case DESCRIPTION:
      return isSetDescription();
    case VAL_METHOD:
      return isSetValMethod();
    case TRAIN_TIME:
      return isSetTrainTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ModelInfo)
      return this.equals((ModelInfo)that);
    return false;
  }

  public boolean equals(ModelInfo that) {
    if (that == null)
      return false;

    boolean this_present_property = true && this.isSetProperty();
    boolean that_present_property = true && that.isSetProperty();
    if (this_present_property || that_present_property) {
      if (!(this_present_property && that_present_property))
        return false;
      if (!this.property.equals(that.property))
        return false;
    }

    boolean this_present_units = true && this.isSetUnits();
    boolean that_present_units = true && that.isSetUnits();
    if (this_present_units || that_present_units) {
      if (!(this_present_units && that_present_units))
        return false;
      if (!this.units.equals(that.units))
        return false;
    }

    boolean this_present_author = true && this.isSetAuthor();
    boolean that_present_author = true && that.isSetAuthor();
    if (this_present_author || that_present_author) {
      if (!(this_present_author && that_present_author))
        return false;
      if (!this.author.equals(that.author))
        return false;
    }

    boolean this_present_training = true && this.isSetTraining();
    boolean that_present_training = true && that.isSetTraining();
    if (this_present_training || that_present_training) {
      if (!(this_present_training && that_present_training))
        return false;
      if (!this.training.equals(that.training))
        return false;
    }

    boolean this_present_citation = true && this.isSetCitation();
    boolean that_present_citation = true && that.isSetCitation();
    if (this_present_citation || that_present_citation) {
      if (!(this_present_citation && that_present_citation))
        return false;
      if (!this.citation.equals(that.citation))
        return false;
    }

    boolean this_present_notes = true && this.isSetNotes();
    boolean that_present_notes = true && that.isSetNotes();
    if (this_present_notes || that_present_notes) {
      if (!(this_present_notes && that_present_notes))
        return false;
      if (!this.notes.equals(that.notes))
        return false;
    }

    boolean this_present_dataType = true && this.isSetDataType();
    boolean that_present_dataType = true && that.isSetDataType();
    if (this_present_dataType || that_present_dataType) {
      if (!(this_present_dataType && that_present_dataType))
        return false;
      if (!this.dataType.equals(that.dataType))
        return false;
    }

    boolean this_present_modelType = true && this.isSetModelType();
    boolean that_present_modelType = true && that.isSetModelType();
    if (this_present_modelType || that_present_modelType) {
      if (!(this_present_modelType && that_present_modelType))
        return false;
      if (!this.modelType.equals(that.modelType))
        return false;
    }

    boolean this_present_classifier = true;
    boolean that_present_classifier = true;
    if (this_present_classifier || that_present_classifier) {
      if (!(this_present_classifier && that_present_classifier))
        return false;
      if (this.classifier != that.classifier)
        return false;
    }

    boolean this_present_valScore = true && this.isSetValScore();
    boolean that_present_valScore = true && that.isSetValScore();
    if (this_present_valScore || that_present_valScore) {
      if (!(this_present_valScore && that_present_valScore))
        return false;
      if (!this.valScore.equals(that.valScore))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_valMethod = true && this.isSetValMethod();
    boolean that_present_valMethod = true && that.isSetValMethod();
    if (this_present_valMethod || that_present_valMethod) {
      if (!(this_present_valMethod && that_present_valMethod))
        return false;
      if (!this.valMethod.equals(that.valMethod))
        return false;
    }

    boolean this_present_trainTime = true && this.isSetTrainTime();
    boolean that_present_trainTime = true && that.isSetTrainTime();
    if (this_present_trainTime || that_present_trainTime) {
      if (!(this_present_trainTime && that_present_trainTime))
        return false;
      if (!this.trainTime.equals(that.trainTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_property = true && (isSetProperty());
    list.add(present_property);
    if (present_property)
      list.add(property);

    boolean present_units = true && (isSetUnits());
    list.add(present_units);
    if (present_units)
      list.add(units);

    boolean present_author = true && (isSetAuthor());
    list.add(present_author);
    if (present_author)
      list.add(author);

    boolean present_training = true && (isSetTraining());
    list.add(present_training);
    if (present_training)
      list.add(training);

    boolean present_citation = true && (isSetCitation());
    list.add(present_citation);
    if (present_citation)
      list.add(citation);

    boolean present_notes = true && (isSetNotes());
    list.add(present_notes);
    if (present_notes)
      list.add(notes);

    boolean present_dataType = true && (isSetDataType());
    list.add(present_dataType);
    if (present_dataType)
      list.add(dataType);

    boolean present_modelType = true && (isSetModelType());
    list.add(present_modelType);
    if (present_modelType)
      list.add(modelType);

    boolean present_classifier = true;
    list.add(present_classifier);
    if (present_classifier)
      list.add(classifier);

    boolean present_valScore = true && (isSetValScore());
    list.add(present_valScore);
    if (present_valScore)
      list.add(valScore);

    boolean present_description = true && (isSetDescription());
    list.add(present_description);
    if (present_description)
      list.add(description);

    boolean present_valMethod = true && (isSetValMethod());
    list.add(present_valMethod);
    if (present_valMethod)
      list.add(valMethod);

    boolean present_trainTime = true && (isSetTrainTime());
    list.add(present_trainTime);
    if (present_trainTime)
      list.add(trainTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(ModelInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetProperty()).compareTo(other.isSetProperty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetProperty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.property, other.property);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnits()).compareTo(other.isSetUnits());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnits()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.units, other.units);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthor()).compareTo(other.isSetAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.author, other.author);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraining()).compareTo(other.isSetTraining());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraining()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.training, other.training);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCitation()).compareTo(other.isSetCitation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCitation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.citation, other.citation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNotes()).compareTo(other.isSetNotes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notes, other.notes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataType()).compareTo(other.isSetDataType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataType, other.dataType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetModelType()).compareTo(other.isSetModelType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetModelType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelType, other.modelType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClassifier()).compareTo(other.isSetClassifier());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClassifier()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classifier, other.classifier);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValScore()).compareTo(other.isSetValScore());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValScore()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valScore, other.valScore);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetValMethod()).compareTo(other.isSetValMethod());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValMethod()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.valMethod, other.valMethod);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTrainTime()).compareTo(other.isSetTrainTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrainTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trainTime, other.trainTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ModelInfo(");
    boolean first = true;

    sb.append("property:");
    if (this.property == null) {
      sb.append("null");
    } else {
      sb.append(this.property);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("units:");
    if (this.units == null) {
      sb.append("null");
    } else {
      sb.append(this.units);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("author:");
    if (this.author == null) {
      sb.append("null");
    } else {
      sb.append(this.author);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("training:");
    if (this.training == null) {
      sb.append("null");
    } else {
      sb.append(this.training);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("citation:");
    if (this.citation == null) {
      sb.append("null");
    } else {
      sb.append(this.citation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notes:");
    if (this.notes == null) {
      sb.append("null");
    } else {
      sb.append(this.notes);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataType:");
    if (this.dataType == null) {
      sb.append("null");
    } else {
      sb.append(this.dataType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("modelType:");
    if (this.modelType == null) {
      sb.append("null");
    } else {
      sb.append(this.modelType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("classifier:");
    sb.append(this.classifier);
    first = false;
    if (!first) sb.append(", ");
    sb.append("valScore:");
    if (this.valScore == null) {
      sb.append("null");
    } else {
      sb.append(this.valScore);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("valMethod:");
    if (this.valMethod == null) {
      sb.append("null");
    } else {
      sb.append(this.valMethod);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("trainTime:");
    if (this.trainTime == null) {
      sb.append("null");
    } else {
      sb.append(this.trainTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ModelInfoStandardSchemeFactory implements SchemeFactory {
    public ModelInfoStandardScheme getScheme() {
      return new ModelInfoStandardScheme();
    }
  }

  private static class ModelInfoStandardScheme extends StandardScheme<ModelInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ModelInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PROPERTY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.property = iprot.readString();
              struct.setPropertyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UNITS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.units = iprot.readString();
              struct.setUnitsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.author = iprot.readString();
              struct.setAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TRAINING
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.training = iprot.readString();
              struct.setTrainingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CITATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.citation = iprot.readString();
              struct.setCitationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NOTES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.notes = iprot.readString();
              struct.setNotesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DATA_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dataType = iprot.readString();
              struct.setDataTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // MODEL_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.modelType = iprot.readString();
              struct.setModelTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CLASSIFIER
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.classifier = iprot.readBool();
              struct.setClassifierIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // VAL_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map38 = iprot.readMapBegin();
                struct.valScore = new HashMap<String,Double>(2*_map38.size);
                String _key39;
                double _val40;
                for (int _i41 = 0; _i41 < _map38.size; ++_i41)
                {
                  _key39 = iprot.readString();
                  _val40 = iprot.readDouble();
                  struct.valScore.put(_key39, _val40);
                }
                iprot.readMapEnd();
              }
              struct.setValScoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // VAL_METHOD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.valMethod = iprot.readString();
              struct.setValMethodIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TRAIN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.trainTime = iprot.readString();
              struct.setTrainTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ModelInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.property != null) {
        oprot.writeFieldBegin(PROPERTY_FIELD_DESC);
        oprot.writeString(struct.property);
        oprot.writeFieldEnd();
      }
      if (struct.units != null) {
        oprot.writeFieldBegin(UNITS_FIELD_DESC);
        oprot.writeString(struct.units);
        oprot.writeFieldEnd();
      }
      if (struct.author != null) {
        oprot.writeFieldBegin(AUTHOR_FIELD_DESC);
        oprot.writeString(struct.author);
        oprot.writeFieldEnd();
      }
      if (struct.training != null) {
        oprot.writeFieldBegin(TRAINING_FIELD_DESC);
        oprot.writeString(struct.training);
        oprot.writeFieldEnd();
      }
      if (struct.citation != null) {
        oprot.writeFieldBegin(CITATION_FIELD_DESC);
        oprot.writeString(struct.citation);
        oprot.writeFieldEnd();
      }
      if (struct.notes != null) {
        oprot.writeFieldBegin(NOTES_FIELD_DESC);
        oprot.writeString(struct.notes);
        oprot.writeFieldEnd();
      }
      if (struct.dataType != null) {
        oprot.writeFieldBegin(DATA_TYPE_FIELD_DESC);
        oprot.writeString(struct.dataType);
        oprot.writeFieldEnd();
      }
      if (struct.modelType != null) {
        oprot.writeFieldBegin(MODEL_TYPE_FIELD_DESC);
        oprot.writeString(struct.modelType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CLASSIFIER_FIELD_DESC);
      oprot.writeBool(struct.classifier);
      oprot.writeFieldEnd();
      if (struct.valScore != null) {
        oprot.writeFieldBegin(VAL_SCORE_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, struct.valScore.size()));
          for (Map.Entry<String, Double> _iter42 : struct.valScore.entrySet())
          {
            oprot.writeString(_iter42.getKey());
            oprot.writeDouble(_iter42.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.valMethod != null) {
        oprot.writeFieldBegin(VAL_METHOD_FIELD_DESC);
        oprot.writeString(struct.valMethod);
        oprot.writeFieldEnd();
      }
      if (struct.trainTime != null) {
        oprot.writeFieldBegin(TRAIN_TIME_FIELD_DESC);
        oprot.writeString(struct.trainTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ModelInfoTupleSchemeFactory implements SchemeFactory {
    public ModelInfoTupleScheme getScheme() {
      return new ModelInfoTupleScheme();
    }
  }

  private static class ModelInfoTupleScheme extends TupleScheme<ModelInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ModelInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetProperty()) {
        optionals.set(0);
      }
      if (struct.isSetUnits()) {
        optionals.set(1);
      }
      if (struct.isSetAuthor()) {
        optionals.set(2);
      }
      if (struct.isSetTraining()) {
        optionals.set(3);
      }
      if (struct.isSetCitation()) {
        optionals.set(4);
      }
      if (struct.isSetNotes()) {
        optionals.set(5);
      }
      if (struct.isSetDataType()) {
        optionals.set(6);
      }
      if (struct.isSetModelType()) {
        optionals.set(7);
      }
      if (struct.isSetClassifier()) {
        optionals.set(8);
      }
      if (struct.isSetValScore()) {
        optionals.set(9);
      }
      if (struct.isSetDescription()) {
        optionals.set(10);
      }
      if (struct.isSetValMethod()) {
        optionals.set(11);
      }
      if (struct.isSetTrainTime()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetProperty()) {
        oprot.writeString(struct.property);
      }
      if (struct.isSetUnits()) {
        oprot.writeString(struct.units);
      }
      if (struct.isSetAuthor()) {
        oprot.writeString(struct.author);
      }
      if (struct.isSetTraining()) {
        oprot.writeString(struct.training);
      }
      if (struct.isSetCitation()) {
        oprot.writeString(struct.citation);
      }
      if (struct.isSetNotes()) {
        oprot.writeString(struct.notes);
      }
      if (struct.isSetDataType()) {
        oprot.writeString(struct.dataType);
      }
      if (struct.isSetModelType()) {
        oprot.writeString(struct.modelType);
      }
      if (struct.isSetClassifier()) {
        oprot.writeBool(struct.classifier);
      }
      if (struct.isSetValScore()) {
        {
          oprot.writeI32(struct.valScore.size());
          for (Map.Entry<String, Double> _iter43 : struct.valScore.entrySet())
          {
            oprot.writeString(_iter43.getKey());
            oprot.writeDouble(_iter43.getValue());
          }
        }
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetValMethod()) {
        oprot.writeString(struct.valMethod);
      }
      if (struct.isSetTrainTime()) {
        oprot.writeString(struct.trainTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ModelInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.property = iprot.readString();
        struct.setPropertyIsSet(true);
      }
      if (incoming.get(1)) {
        struct.units = iprot.readString();
        struct.setUnitsIsSet(true);
      }
      if (incoming.get(2)) {
        struct.author = iprot.readString();
        struct.setAuthorIsSet(true);
      }
      if (incoming.get(3)) {
        struct.training = iprot.readString();
        struct.setTrainingIsSet(true);
      }
      if (incoming.get(4)) {
        struct.citation = iprot.readString();
        struct.setCitationIsSet(true);
      }
      if (incoming.get(5)) {
        struct.notes = iprot.readString();
        struct.setNotesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.dataType = iprot.readString();
        struct.setDataTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.modelType = iprot.readString();
        struct.setModelTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.classifier = iprot.readBool();
        struct.setClassifierIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TMap _map44 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.valScore = new HashMap<String,Double>(2*_map44.size);
          String _key45;
          double _val46;
          for (int _i47 = 0; _i47 < _map44.size; ++_i47)
          {
            _key45 = iprot.readString();
            _val46 = iprot.readDouble();
            struct.valScore.put(_key45, _val46);
          }
        }
        struct.setValScoreIsSet(true);
      }
      if (incoming.get(10)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(11)) {
        struct.valMethod = iprot.readString();
        struct.setValMethodIsSet(true);
      }
      if (incoming.get(12)) {
        struct.trainTime = iprot.readString();
        struct.setTrainTimeIsSet(true);
      }
    }
  }

}

