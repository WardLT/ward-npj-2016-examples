/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
/**
 * Store data regarding an entry:
 * 
 *  name                : String describing this entry (parsed before
 *  measuredProperties  : Measured class variable
 *  predictedProperties : Predicted class variable for each model
 *  classProbs          : (Classifiers) Probability of membership in each class
 */
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-1-12")
public class Entry implements org.apache.thrift.TBase<Entry, Entry._Fields>, java.io.Serializable, Cloneable, Comparable<Entry> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Entry");

  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MEASURED_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("measuredProperties", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField PREDICTED_PROPERTIES_FIELD_DESC = new org.apache.thrift.protocol.TField("predictedProperties", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField CLASS_PROBS_FIELD_DESC = new org.apache.thrift.protocol.TField("classProbs", org.apache.thrift.protocol.TType.MAP, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EntryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EntryTupleSchemeFactory());
  }

  public String name; // required
  public Map<String,Double> measuredProperties; // required
  public Map<String,Double> predictedProperties; // required
  public Map<String,List<Double>> classProbs; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NAME((short)1, "name"),
    MEASURED_PROPERTIES((short)2, "measuredProperties"),
    PREDICTED_PROPERTIES((short)3, "predictedProperties"),
    CLASS_PROBS((short)4, "classProbs");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NAME
          return NAME;
        case 2: // MEASURED_PROPERTIES
          return MEASURED_PROPERTIES;
        case 3: // PREDICTED_PROPERTIES
          return PREDICTED_PROPERTIES;
        case 4: // CLASS_PROBS
          return CLASS_PROBS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEASURED_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("measuredProperties", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.PREDICTED_PROPERTIES, new org.apache.thrift.meta_data.FieldMetaData("predictedProperties", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE))));
    tmpMap.put(_Fields.CLASS_PROBS, new org.apache.thrift.meta_data.FieldMetaData("classProbs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Entry.class, metaDataMap);
  }

  public Entry() {
    this.measuredProperties = new HashMap<String,Double>();

    this.predictedProperties = new HashMap<String,Double>();

    this.classProbs = new HashMap<String,List<Double>>();

  }

  public Entry(
    String name,
    Map<String,Double> measuredProperties,
    Map<String,Double> predictedProperties,
    Map<String,List<Double>> classProbs)
  {
    this();
    this.name = name;
    this.measuredProperties = measuredProperties;
    this.predictedProperties = predictedProperties;
    this.classProbs = classProbs;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Entry(Entry other) {
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetMeasuredProperties()) {
      Map<String,Double> __this__measuredProperties = new HashMap<String,Double>(other.measuredProperties);
      this.measuredProperties = __this__measuredProperties;
    }
    if (other.isSetPredictedProperties()) {
      Map<String,Double> __this__predictedProperties = new HashMap<String,Double>(other.predictedProperties);
      this.predictedProperties = __this__predictedProperties;
    }
    if (other.isSetClassProbs()) {
      Map<String,List<Double>> __this__classProbs = new HashMap<String,List<Double>>(other.classProbs.size());
      for (Map.Entry<String, List<Double>> other_element : other.classProbs.entrySet()) {

        String other_element_key = other_element.getKey();
        List<Double> other_element_value = other_element.getValue();

        String __this__classProbs_copy_key = other_element_key;

        List<Double> __this__classProbs_copy_value = new ArrayList<Double>(other_element_value);

        __this__classProbs.put(__this__classProbs_copy_key, __this__classProbs_copy_value);
      }
      this.classProbs = __this__classProbs;
    }
  }

  public Entry deepCopy() {
    return new Entry(this);
  }

  @Override
  public void clear() {
    this.name = null;
    this.measuredProperties = new HashMap<String,Double>();

    this.predictedProperties = new HashMap<String,Double>();

    this.classProbs = new HashMap<String,List<Double>>();

  }

  public String getName() {
    return this.name;
  }

  public Entry setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public int getMeasuredPropertiesSize() {
    return (this.measuredProperties == null) ? 0 : this.measuredProperties.size();
  }

  public void putToMeasuredProperties(String key, double val) {
    if (this.measuredProperties == null) {
      this.measuredProperties = new HashMap<String,Double>();
    }
    this.measuredProperties.put(key, val);
  }

  public Map<String,Double> getMeasuredProperties() {
    return this.measuredProperties;
  }

  public Entry setMeasuredProperties(Map<String,Double> measuredProperties) {
    this.measuredProperties = measuredProperties;
    return this;
  }

  public void unsetMeasuredProperties() {
    this.measuredProperties = null;
  }

  /** Returns true if field measuredProperties is set (has been assigned a value) and false otherwise */
  public boolean isSetMeasuredProperties() {
    return this.measuredProperties != null;
  }

  public void setMeasuredPropertiesIsSet(boolean value) {
    if (!value) {
      this.measuredProperties = null;
    }
  }

  public int getPredictedPropertiesSize() {
    return (this.predictedProperties == null) ? 0 : this.predictedProperties.size();
  }

  public void putToPredictedProperties(String key, double val) {
    if (this.predictedProperties == null) {
      this.predictedProperties = new HashMap<String,Double>();
    }
    this.predictedProperties.put(key, val);
  }

  public Map<String,Double> getPredictedProperties() {
    return this.predictedProperties;
  }

  public Entry setPredictedProperties(Map<String,Double> predictedProperties) {
    this.predictedProperties = predictedProperties;
    return this;
  }

  public void unsetPredictedProperties() {
    this.predictedProperties = null;
  }

  /** Returns true if field predictedProperties is set (has been assigned a value) and false otherwise */
  public boolean isSetPredictedProperties() {
    return this.predictedProperties != null;
  }

  public void setPredictedPropertiesIsSet(boolean value) {
    if (!value) {
      this.predictedProperties = null;
    }
  }

  public int getClassProbsSize() {
    return (this.classProbs == null) ? 0 : this.classProbs.size();
  }

  public void putToClassProbs(String key, List<Double> val) {
    if (this.classProbs == null) {
      this.classProbs = new HashMap<String,List<Double>>();
    }
    this.classProbs.put(key, val);
  }

  public Map<String,List<Double>> getClassProbs() {
    return this.classProbs;
  }

  public Entry setClassProbs(Map<String,List<Double>> classProbs) {
    this.classProbs = classProbs;
    return this;
  }

  public void unsetClassProbs() {
    this.classProbs = null;
  }

  /** Returns true if field classProbs is set (has been assigned a value) and false otherwise */
  public boolean isSetClassProbs() {
    return this.classProbs != null;
  }

  public void setClassProbsIsSet(boolean value) {
    if (!value) {
      this.classProbs = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case MEASURED_PROPERTIES:
      if (value == null) {
        unsetMeasuredProperties();
      } else {
        setMeasuredProperties((Map<String,Double>)value);
      }
      break;

    case PREDICTED_PROPERTIES:
      if (value == null) {
        unsetPredictedProperties();
      } else {
        setPredictedProperties((Map<String,Double>)value);
      }
      break;

    case CLASS_PROBS:
      if (value == null) {
        unsetClassProbs();
      } else {
        setClassProbs((Map<String,List<Double>>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case NAME:
      return getName();

    case MEASURED_PROPERTIES:
      return getMeasuredProperties();

    case PREDICTED_PROPERTIES:
      return getPredictedProperties();

    case CLASS_PROBS:
      return getClassProbs();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case NAME:
      return isSetName();
    case MEASURED_PROPERTIES:
      return isSetMeasuredProperties();
    case PREDICTED_PROPERTIES:
      return isSetPredictedProperties();
    case CLASS_PROBS:
      return isSetClassProbs();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Entry)
      return this.equals((Entry)that);
    return false;
  }

  public boolean equals(Entry that) {
    if (that == null)
      return false;

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_measuredProperties = true && this.isSetMeasuredProperties();
    boolean that_present_measuredProperties = true && that.isSetMeasuredProperties();
    if (this_present_measuredProperties || that_present_measuredProperties) {
      if (!(this_present_measuredProperties && that_present_measuredProperties))
        return false;
      if (!this.measuredProperties.equals(that.measuredProperties))
        return false;
    }

    boolean this_present_predictedProperties = true && this.isSetPredictedProperties();
    boolean that_present_predictedProperties = true && that.isSetPredictedProperties();
    if (this_present_predictedProperties || that_present_predictedProperties) {
      if (!(this_present_predictedProperties && that_present_predictedProperties))
        return false;
      if (!this.predictedProperties.equals(that.predictedProperties))
        return false;
    }

    boolean this_present_classProbs = true && this.isSetClassProbs();
    boolean that_present_classProbs = true && that.isSetClassProbs();
    if (this_present_classProbs || that_present_classProbs) {
      if (!(this_present_classProbs && that_present_classProbs))
        return false;
      if (!this.classProbs.equals(that.classProbs))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_name = true && (isSetName());
    list.add(present_name);
    if (present_name)
      list.add(name);

    boolean present_measuredProperties = true && (isSetMeasuredProperties());
    list.add(present_measuredProperties);
    if (present_measuredProperties)
      list.add(measuredProperties);

    boolean present_predictedProperties = true && (isSetPredictedProperties());
    list.add(present_predictedProperties);
    if (present_predictedProperties)
      list.add(predictedProperties);

    boolean present_classProbs = true && (isSetClassProbs());
    list.add(present_classProbs);
    if (present_classProbs)
      list.add(classProbs);

    return list.hashCode();
  }

  @Override
  public int compareTo(Entry other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMeasuredProperties()).compareTo(other.isSetMeasuredProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMeasuredProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.measuredProperties, other.measuredProperties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPredictedProperties()).compareTo(other.isSetPredictedProperties());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPredictedProperties()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.predictedProperties, other.predictedProperties);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClassProbs()).compareTo(other.isSetClassProbs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClassProbs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.classProbs, other.classProbs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Entry(");
    boolean first = true;

    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("measuredProperties:");
    if (this.measuredProperties == null) {
      sb.append("null");
    } else {
      sb.append(this.measuredProperties);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("predictedProperties:");
    if (this.predictedProperties == null) {
      sb.append("null");
    } else {
      sb.append(this.predictedProperties);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("classProbs:");
    if (this.classProbs == null) {
      sb.append("null");
    } else {
      sb.append(this.classProbs);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EntryStandardSchemeFactory implements SchemeFactory {
    public EntryStandardScheme getScheme() {
      return new EntryStandardScheme();
    }
  }

  private static class EntryStandardScheme extends StandardScheme<Entry> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Entry struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MEASURED_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                struct.measuredProperties = new HashMap<String,Double>(2*_map0.size);
                String _key1;
                double _val2;
                for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                {
                  _key1 = iprot.readString();
                  _val2 = iprot.readDouble();
                  struct.measuredProperties.put(_key1, _val2);
                }
                iprot.readMapEnd();
              }
              struct.setMeasuredPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PREDICTED_PROPERTIES
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map4 = iprot.readMapBegin();
                struct.predictedProperties = new HashMap<String,Double>(2*_map4.size);
                String _key5;
                double _val6;
                for (int _i7 = 0; _i7 < _map4.size; ++_i7)
                {
                  _key5 = iprot.readString();
                  _val6 = iprot.readDouble();
                  struct.predictedProperties.put(_key5, _val6);
                }
                iprot.readMapEnd();
              }
              struct.setPredictedPropertiesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CLASS_PROBS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map8 = iprot.readMapBegin();
                struct.classProbs = new HashMap<String,List<Double>>(2*_map8.size);
                String _key9;
                List<Double> _val10;
                for (int _i11 = 0; _i11 < _map8.size; ++_i11)
                {
                  _key9 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TList _list12 = iprot.readListBegin();
                    _val10 = new ArrayList<Double>(_list12.size);
                    double _elem13;
                    for (int _i14 = 0; _i14 < _list12.size; ++_i14)
                    {
                      _elem13 = iprot.readDouble();
                      _val10.add(_elem13);
                    }
                    iprot.readListEnd();
                  }
                  struct.classProbs.put(_key9, _val10);
                }
                iprot.readMapEnd();
              }
              struct.setClassProbsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Entry struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.measuredProperties != null) {
        oprot.writeFieldBegin(MEASURED_PROPERTIES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, struct.measuredProperties.size()));
          for (Map.Entry<String, Double> _iter15 : struct.measuredProperties.entrySet())
          {
            oprot.writeString(_iter15.getKey());
            oprot.writeDouble(_iter15.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.predictedProperties != null) {
        oprot.writeFieldBegin(PREDICTED_PROPERTIES_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, struct.predictedProperties.size()));
          for (Map.Entry<String, Double> _iter16 : struct.predictedProperties.entrySet())
          {
            oprot.writeString(_iter16.getKey());
            oprot.writeDouble(_iter16.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.classProbs != null) {
        oprot.writeFieldBegin(CLASS_PROBS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, struct.classProbs.size()));
          for (Map.Entry<String, List<Double>> _iter17 : struct.classProbs.entrySet())
          {
            oprot.writeString(_iter17.getKey());
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, _iter17.getValue().size()));
              for (double _iter18 : _iter17.getValue())
              {
                oprot.writeDouble(_iter18);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EntryTupleSchemeFactory implements SchemeFactory {
    public EntryTupleScheme getScheme() {
      return new EntryTupleScheme();
    }
  }

  private static class EntryTupleScheme extends TupleScheme<Entry> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Entry struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetName()) {
        optionals.set(0);
      }
      if (struct.isSetMeasuredProperties()) {
        optionals.set(1);
      }
      if (struct.isSetPredictedProperties()) {
        optionals.set(2);
      }
      if (struct.isSetClassProbs()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetMeasuredProperties()) {
        {
          oprot.writeI32(struct.measuredProperties.size());
          for (Map.Entry<String, Double> _iter19 : struct.measuredProperties.entrySet())
          {
            oprot.writeString(_iter19.getKey());
            oprot.writeDouble(_iter19.getValue());
          }
        }
      }
      if (struct.isSetPredictedProperties()) {
        {
          oprot.writeI32(struct.predictedProperties.size());
          for (Map.Entry<String, Double> _iter20 : struct.predictedProperties.entrySet())
          {
            oprot.writeString(_iter20.getKey());
            oprot.writeDouble(_iter20.getValue());
          }
        }
      }
      if (struct.isSetClassProbs()) {
        {
          oprot.writeI32(struct.classProbs.size());
          for (Map.Entry<String, List<Double>> _iter21 : struct.classProbs.entrySet())
          {
            oprot.writeString(_iter21.getKey());
            {
              oprot.writeI32(_iter21.getValue().size());
              for (double _iter22 : _iter21.getValue())
              {
                oprot.writeDouble(_iter22);
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Entry struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map23 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.measuredProperties = new HashMap<String,Double>(2*_map23.size);
          String _key24;
          double _val25;
          for (int _i26 = 0; _i26 < _map23.size; ++_i26)
          {
            _key24 = iprot.readString();
            _val25 = iprot.readDouble();
            struct.measuredProperties.put(_key24, _val25);
          }
        }
        struct.setMeasuredPropertiesIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map27 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
          struct.predictedProperties = new HashMap<String,Double>(2*_map27.size);
          String _key28;
          double _val29;
          for (int _i30 = 0; _i30 < _map27.size; ++_i30)
          {
            _key28 = iprot.readString();
            _val29 = iprot.readDouble();
            struct.predictedProperties.put(_key28, _val29);
          }
        }
        struct.setPredictedPropertiesIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TMap _map31 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.LIST, iprot.readI32());
          struct.classProbs = new HashMap<String,List<Double>>(2*_map31.size);
          String _key32;
          List<Double> _val33;
          for (int _i34 = 0; _i34 < _map31.size; ++_i34)
          {
            _key32 = iprot.readString();
            {
              org.apache.thrift.protocol.TList _list35 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.DOUBLE, iprot.readI32());
              _val33 = new ArrayList<Double>(_list35.size);
              double _elem36;
              for (int _i37 = 0; _i37 < _list35.size; ++_i37)
              {
                _elem36 = iprot.readDouble();
                _val33.add(_elem36);
              }
            }
            struct.classProbs.put(_key32, _val33);
          }
        }
        struct.setClassProbsIsSet(true);
      }
    }
  }

}

