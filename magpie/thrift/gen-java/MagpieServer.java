/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2016-1-12")
public class MagpieServer {

  public interface Iface {

    /**
     * Get information about available models
     * @return Map of model name to model info
     */
    public Map<String,ModelInfo> getModelInformation() throws MagpieException, org.apache.thrift.TException;

    /**
     * Compute the properties of each entry in a list. Results are stored in
     * the predictedProperties and classProbs maps.
     * 
     * @param entries [in] List of entries to be evaluated
     * @param props [in] Names of properties to evaluate
     * @return Entry objects with property measurements
     * 
     * @param entries
     * @param props
     */
    public List<Entry> evaluateProperties(List<Entry> entries, List<String> props) throws MagpieException, org.apache.thrift.TException;

    /**
     * Search for optimal materials based on a single objective in a
     * user-defined space
     * 
     *      _How to Define Objective Function_
     * 
     * The first word in the objective function input should be the name of the
     * property being optimized, followed by whether to minimize or maximize the
     * objective function, then the name of EntryRanker, and (finally) its options.
     * 
     * Summary: <property> <minimize|maximize> <EntryRanker method> <options...>
     * 
     * Example: To find a material with a band gap close to 1.3 eV
     *     bandgap minimize TargetEntryRanker 1.3
     * 
     * Relevant Document Pages:
     * 
     * ./javadoc/magpie/optimization/rankers/package-summary.html
     * 
     *      _How to Define Search Space_
     * 
     * Search spaces are created using EntryGenerator classes. The first
     *  in the input string is the name of the generator class, which
     * is followed by any options for the generator
     * 
     * Summary: <EntryGenerator method> <options...>
     * 
     * Example: 5 points on each binary containing either Al, Ni, or Zr
     *     PhaseDiagramCompositionEntryGenerator 1 2 -alloy 0.2 Al Ni Zr
     * 
     * Relevant Documentation Pages:
     * 
     * ./javadoc/magpie/data/utilities/generators/package-summary.html
     * 
     * @param obj [in] Objective function
     * @param genMethod [in] Definition of search space
     * @param numToList [in] Number of top candidates to return
     * @return List of the top-performing entries
     * 
     * @param obj
     * @param genMethod
     * @param numToList
     */
    public List<Entry> searchSingleObjective(String obj, String genMethod, int numToList) throws MagpieException, org.apache.thrift.TException;

    /**
     * Search for optimal materials based on a multiple objectives in a
     * user-defined space. Combines multiple objective functions using
     * the AdaptiveScalarizingEntryRanker.
     * 
     * Individual objective functions are defined in the same way as in the
     * single objective search.
     * 
     * Relevant Documentation Pages:
     * 
     * ./javadoc/magpie/optimization/rankers/AdaptiveScalarizingEntryRanker.html
     * 
     * @param p [in] Tradeoff Parameter
     * @param objs [in] Objective functions
     * @param genMethod [in] Definition of search space
     * @param numToList [in] Number of top candidates to return
     * @return List of the top-performing entries
     * 
     * @param p
     * @param objs
     * @param genMethod
     * @param numToList
     */
    public List<Entry> searchMultiObjective(double p, List<String> objs, String genMethod, int numToList) throws MagpieException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getModelInformation(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void evaluateProperties(List<Entry> entries, List<String> props, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void searchSingleObjective(String obj, String genMethod, int numToList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void searchMultiObjective(double p, List<String> objs, String genMethod, int numToList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Map<String,ModelInfo> getModelInformation() throws MagpieException, org.apache.thrift.TException
    {
      send_getModelInformation();
      return recv_getModelInformation();
    }

    public void send_getModelInformation() throws org.apache.thrift.TException
    {
      getModelInformation_args args = new getModelInformation_args();
      sendBase("getModelInformation", args);
    }

    public Map<String,ModelInfo> recv_getModelInformation() throws MagpieException, org.apache.thrift.TException
    {
      getModelInformation_result result = new getModelInformation_result();
      receiveBase(result, "getModelInformation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch != null) {
        throw result.ouch;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getModelInformation failed: unknown result");
    }

    public List<Entry> evaluateProperties(List<Entry> entries, List<String> props) throws MagpieException, org.apache.thrift.TException
    {
      send_evaluateProperties(entries, props);
      return recv_evaluateProperties();
    }

    public void send_evaluateProperties(List<Entry> entries, List<String> props) throws org.apache.thrift.TException
    {
      evaluateProperties_args args = new evaluateProperties_args();
      args.setEntries(entries);
      args.setProps(props);
      sendBase("evaluateProperties", args);
    }

    public List<Entry> recv_evaluateProperties() throws MagpieException, org.apache.thrift.TException
    {
      evaluateProperties_result result = new evaluateProperties_result();
      receiveBase(result, "evaluateProperties");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch != null) {
        throw result.ouch;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "evaluateProperties failed: unknown result");
    }

    public List<Entry> searchSingleObjective(String obj, String genMethod, int numToList) throws MagpieException, org.apache.thrift.TException
    {
      send_searchSingleObjective(obj, genMethod, numToList);
      return recv_searchSingleObjective();
    }

    public void send_searchSingleObjective(String obj, String genMethod, int numToList) throws org.apache.thrift.TException
    {
      searchSingleObjective_args args = new searchSingleObjective_args();
      args.setObj(obj);
      args.setGenMethod(genMethod);
      args.setNumToList(numToList);
      sendBase("searchSingleObjective", args);
    }

    public List<Entry> recv_searchSingleObjective() throws MagpieException, org.apache.thrift.TException
    {
      searchSingleObjective_result result = new searchSingleObjective_result();
      receiveBase(result, "searchSingleObjective");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch != null) {
        throw result.ouch;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchSingleObjective failed: unknown result");
    }

    public List<Entry> searchMultiObjective(double p, List<String> objs, String genMethod, int numToList) throws MagpieException, org.apache.thrift.TException
    {
      send_searchMultiObjective(p, objs, genMethod, numToList);
      return recv_searchMultiObjective();
    }

    public void send_searchMultiObjective(double p, List<String> objs, String genMethod, int numToList) throws org.apache.thrift.TException
    {
      searchMultiObjective_args args = new searchMultiObjective_args();
      args.setP(p);
      args.setObjs(objs);
      args.setGenMethod(genMethod);
      args.setNumToList(numToList);
      sendBase("searchMultiObjective", args);
    }

    public List<Entry> recv_searchMultiObjective() throws MagpieException, org.apache.thrift.TException
    {
      searchMultiObjective_result result = new searchMultiObjective_result();
      receiveBase(result, "searchMultiObjective");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.ouch != null) {
        throw result.ouch;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchMultiObjective failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getModelInformation(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getModelInformation_call method_call = new getModelInformation_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getModelInformation_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getModelInformation_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getModelInformation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getModelInformation_args args = new getModelInformation_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<String,ModelInfo> getResult() throws MagpieException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getModelInformation();
      }
    }

    public void evaluateProperties(List<Entry> entries, List<String> props, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      evaluateProperties_call method_call = new evaluateProperties_call(entries, props, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class evaluateProperties_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Entry> entries;
      private List<String> props;
      public evaluateProperties_call(List<Entry> entries, List<String> props, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entries = entries;
        this.props = props;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("evaluateProperties", org.apache.thrift.protocol.TMessageType.CALL, 0));
        evaluateProperties_args args = new evaluateProperties_args();
        args.setEntries(entries);
        args.setProps(props);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Entry> getResult() throws MagpieException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_evaluateProperties();
      }
    }

    public void searchSingleObjective(String obj, String genMethod, int numToList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchSingleObjective_call method_call = new searchSingleObjective_call(obj, genMethod, numToList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchSingleObjective_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String obj;
      private String genMethod;
      private int numToList;
      public searchSingleObjective_call(String obj, String genMethod, int numToList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.obj = obj;
        this.genMethod = genMethod;
        this.numToList = numToList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchSingleObjective", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchSingleObjective_args args = new searchSingleObjective_args();
        args.setObj(obj);
        args.setGenMethod(genMethod);
        args.setNumToList(numToList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Entry> getResult() throws MagpieException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchSingleObjective();
      }
    }

    public void searchMultiObjective(double p, List<String> objs, String genMethod, int numToList, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchMultiObjective_call method_call = new searchMultiObjective_call(p, objs, genMethod, numToList, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchMultiObjective_call extends org.apache.thrift.async.TAsyncMethodCall {
      private double p;
      private List<String> objs;
      private String genMethod;
      private int numToList;
      public searchMultiObjective_call(double p, List<String> objs, String genMethod, int numToList, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.p = p;
        this.objs = objs;
        this.genMethod = genMethod;
        this.numToList = numToList;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchMultiObjective", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchMultiObjective_args args = new searchMultiObjective_args();
        args.setP(p);
        args.setObjs(objs);
        args.setGenMethod(genMethod);
        args.setNumToList(numToList);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Entry> getResult() throws MagpieException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchMultiObjective();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getModelInformation", new getModelInformation());
      processMap.put("evaluateProperties", new evaluateProperties());
      processMap.put("searchSingleObjective", new searchSingleObjective());
      processMap.put("searchMultiObjective", new searchMultiObjective());
      return processMap;
    }

    public static class getModelInformation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getModelInformation_args> {
      public getModelInformation() {
        super("getModelInformation");
      }

      public getModelInformation_args getEmptyArgsInstance() {
        return new getModelInformation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getModelInformation_result getResult(I iface, getModelInformation_args args) throws org.apache.thrift.TException {
        getModelInformation_result result = new getModelInformation_result();
        try {
          result.success = iface.getModelInformation();
        } catch (MagpieException ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class evaluateProperties<I extends Iface> extends org.apache.thrift.ProcessFunction<I, evaluateProperties_args> {
      public evaluateProperties() {
        super("evaluateProperties");
      }

      public evaluateProperties_args getEmptyArgsInstance() {
        return new evaluateProperties_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public evaluateProperties_result getResult(I iface, evaluateProperties_args args) throws org.apache.thrift.TException {
        evaluateProperties_result result = new evaluateProperties_result();
        try {
          result.success = iface.evaluateProperties(args.entries, args.props);
        } catch (MagpieException ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class searchSingleObjective<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchSingleObjective_args> {
      public searchSingleObjective() {
        super("searchSingleObjective");
      }

      public searchSingleObjective_args getEmptyArgsInstance() {
        return new searchSingleObjective_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchSingleObjective_result getResult(I iface, searchSingleObjective_args args) throws org.apache.thrift.TException {
        searchSingleObjective_result result = new searchSingleObjective_result();
        try {
          result.success = iface.searchSingleObjective(args.obj, args.genMethod, args.numToList);
        } catch (MagpieException ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

    public static class searchMultiObjective<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchMultiObjective_args> {
      public searchMultiObjective() {
        super("searchMultiObjective");
      }

      public searchMultiObjective_args getEmptyArgsInstance() {
        return new searchMultiObjective_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchMultiObjective_result getResult(I iface, searchMultiObjective_args args) throws org.apache.thrift.TException {
        searchMultiObjective_result result = new searchMultiObjective_result();
        try {
          result.success = iface.searchMultiObjective(args.p, args.objs, args.genMethod, args.numToList);
        } catch (MagpieException ouch) {
          result.ouch = ouch;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getModelInformation", new getModelInformation());
      processMap.put("evaluateProperties", new evaluateProperties());
      processMap.put("searchSingleObjective", new searchSingleObjective());
      processMap.put("searchMultiObjective", new searchMultiObjective());
      return processMap;
    }

    public static class getModelInformation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getModelInformation_args, Map<String,ModelInfo>> {
      public getModelInformation() {
        super("getModelInformation");
      }

      public getModelInformation_args getEmptyArgsInstance() {
        return new getModelInformation_args();
      }

      public AsyncMethodCallback<Map<String,ModelInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Map<String,ModelInfo>>() { 
          public void onComplete(Map<String,ModelInfo> o) {
            getModelInformation_result result = new getModelInformation_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getModelInformation_result result = new getModelInformation_result();
            if (e instanceof MagpieException) {
                        result.ouch = (MagpieException) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getModelInformation_args args, org.apache.thrift.async.AsyncMethodCallback<Map<String,ModelInfo>> resultHandler) throws TException {
        iface.getModelInformation(resultHandler);
      }
    }

    public static class evaluateProperties<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, evaluateProperties_args, List<Entry>> {
      public evaluateProperties() {
        super("evaluateProperties");
      }

      public evaluateProperties_args getEmptyArgsInstance() {
        return new evaluateProperties_args();
      }

      public AsyncMethodCallback<List<Entry>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Entry>>() { 
          public void onComplete(List<Entry> o) {
            evaluateProperties_result result = new evaluateProperties_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            evaluateProperties_result result = new evaluateProperties_result();
            if (e instanceof MagpieException) {
                        result.ouch = (MagpieException) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, evaluateProperties_args args, org.apache.thrift.async.AsyncMethodCallback<List<Entry>> resultHandler) throws TException {
        iface.evaluateProperties(args.entries, args.props,resultHandler);
      }
    }

    public static class searchSingleObjective<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, searchSingleObjective_args, List<Entry>> {
      public searchSingleObjective() {
        super("searchSingleObjective");
      }

      public searchSingleObjective_args getEmptyArgsInstance() {
        return new searchSingleObjective_args();
      }

      public AsyncMethodCallback<List<Entry>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Entry>>() { 
          public void onComplete(List<Entry> o) {
            searchSingleObjective_result result = new searchSingleObjective_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            searchSingleObjective_result result = new searchSingleObjective_result();
            if (e instanceof MagpieException) {
                        result.ouch = (MagpieException) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, searchSingleObjective_args args, org.apache.thrift.async.AsyncMethodCallback<List<Entry>> resultHandler) throws TException {
        iface.searchSingleObjective(args.obj, args.genMethod, args.numToList,resultHandler);
      }
    }

    public static class searchMultiObjective<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, searchMultiObjective_args, List<Entry>> {
      public searchMultiObjective() {
        super("searchMultiObjective");
      }

      public searchMultiObjective_args getEmptyArgsInstance() {
        return new searchMultiObjective_args();
      }

      public AsyncMethodCallback<List<Entry>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Entry>>() { 
          public void onComplete(List<Entry> o) {
            searchMultiObjective_result result = new searchMultiObjective_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            searchMultiObjective_result result = new searchMultiObjective_result();
            if (e instanceof MagpieException) {
                        result.ouch = (MagpieException) e;
                        result.setOuchIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, searchMultiObjective_args args, org.apache.thrift.async.AsyncMethodCallback<List<Entry>> resultHandler) throws TException {
        iface.searchMultiObjective(args.p, args.objs, args.genMethod, args.numToList,resultHandler);
      }
    }

  }

  public static class getModelInformation_args implements org.apache.thrift.TBase<getModelInformation_args, getModelInformation_args._Fields>, java.io.Serializable, Cloneable, Comparable<getModelInformation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getModelInformation_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getModelInformation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getModelInformation_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getModelInformation_args.class, metaDataMap);
    }

    public getModelInformation_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getModelInformation_args(getModelInformation_args other) {
    }

    public getModelInformation_args deepCopy() {
      return new getModelInformation_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getModelInformation_args)
        return this.equals((getModelInformation_args)that);
      return false;
    }

    public boolean equals(getModelInformation_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(getModelInformation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getModelInformation_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getModelInformation_argsStandardSchemeFactory implements SchemeFactory {
      public getModelInformation_argsStandardScheme getScheme() {
        return new getModelInformation_argsStandardScheme();
      }
    }

    private static class getModelInformation_argsStandardScheme extends StandardScheme<getModelInformation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getModelInformation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getModelInformation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getModelInformation_argsTupleSchemeFactory implements SchemeFactory {
      public getModelInformation_argsTupleScheme getScheme() {
        return new getModelInformation_argsTupleScheme();
      }
    }

    private static class getModelInformation_argsTupleScheme extends TupleScheme<getModelInformation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getModelInformation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getModelInformation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getModelInformation_result implements org.apache.thrift.TBase<getModelInformation_result, getModelInformation_result._Fields>, java.io.Serializable, Cloneable, Comparable<getModelInformation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getModelInformation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getModelInformation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getModelInformation_resultTupleSchemeFactory());
    }

    public Map<String,ModelInfo> success; // required
    public MagpieException ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ModelInfo.class))));
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getModelInformation_result.class, metaDataMap);
    }

    public getModelInformation_result() {
    }

    public getModelInformation_result(
      Map<String,ModelInfo> success,
      MagpieException ouch)
    {
      this();
      this.success = success;
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getModelInformation_result(getModelInformation_result other) {
      if (other.isSetSuccess()) {
        Map<String,ModelInfo> __this__success = new HashMap<String,ModelInfo>(other.success.size());
        for (Map.Entry<String, ModelInfo> other_element : other.success.entrySet()) {

          String other_element_key = other_element.getKey();
          ModelInfo other_element_value = other_element.getValue();

          String __this__success_copy_key = other_element_key;

          ModelInfo __this__success_copy_value = new ModelInfo(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetOuch()) {
        this.ouch = new MagpieException(other.ouch);
      }
    }

    public getModelInformation_result deepCopy() {
      return new getModelInformation_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ouch = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(String key, ModelInfo val) {
      if (this.success == null) {
        this.success = new HashMap<String,ModelInfo>();
      }
      this.success.put(key, val);
    }

    public Map<String,ModelInfo> getSuccess() {
      return this.success;
    }

    public getModelInformation_result setSuccess(Map<String,ModelInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public MagpieException getOuch() {
      return this.ouch;
    }

    public getModelInformation_result setOuch(MagpieException ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<String,ModelInfo>)value);
        }
        break;

      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((MagpieException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getModelInformation_result)
        return this.equals((getModelInformation_result)that);
      return false;
    }

    public boolean equals(getModelInformation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(getModelInformation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getModelInformation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getModelInformation_resultStandardSchemeFactory implements SchemeFactory {
      public getModelInformation_resultStandardScheme getScheme() {
        return new getModelInformation_resultStandardScheme();
      }
    }

    private static class getModelInformation_resultStandardScheme extends StandardScheme<getModelInformation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getModelInformation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map48 = iprot.readMapBegin();
                  struct.success = new HashMap<String,ModelInfo>(2*_map48.size);
                  String _key49;
                  ModelInfo _val50;
                  for (int _i51 = 0; _i51 < _map48.size; ++_i51)
                  {
                    _key49 = iprot.readString();
                    _val50 = new ModelInfo();
                    _val50.read(iprot);
                    struct.success.put(_key49, _val50);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new MagpieException();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getModelInformation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Map.Entry<String, ModelInfo> _iter52 : struct.success.entrySet())
            {
              oprot.writeString(_iter52.getKey());
              _iter52.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getModelInformation_resultTupleSchemeFactory implements SchemeFactory {
      public getModelInformation_resultTupleScheme getScheme() {
        return new getModelInformation_resultTupleScheme();
      }
    }

    private static class getModelInformation_resultTupleScheme extends TupleScheme<getModelInformation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getModelInformation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<String, ModelInfo> _iter53 : struct.success.entrySet())
            {
              oprot.writeString(_iter53.getKey());
              _iter53.getValue().write(oprot);
            }
          }
        }
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getModelInformation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map54 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new HashMap<String,ModelInfo>(2*_map54.size);
            String _key55;
            ModelInfo _val56;
            for (int _i57 = 0; _i57 < _map54.size; ++_i57)
            {
              _key55 = iprot.readString();
              _val56 = new ModelInfo();
              _val56.read(iprot);
              struct.success.put(_key55, _val56);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch = new MagpieException();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class evaluateProperties_args implements org.apache.thrift.TBase<evaluateProperties_args, evaluateProperties_args._Fields>, java.io.Serializable, Cloneable, Comparable<evaluateProperties_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("evaluateProperties_args");

    private static final org.apache.thrift.protocol.TField ENTRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("entries", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField PROPS_FIELD_DESC = new org.apache.thrift.protocol.TField("props", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new evaluateProperties_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new evaluateProperties_argsTupleSchemeFactory());
    }

    public List<Entry> entries; // required
    public List<String> props; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTRIES((short)1, "entries"),
      PROPS((short)2, "props");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTRIES
            return ENTRIES;
          case 2: // PROPS
            return PROPS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTRIES, new org.apache.thrift.meta_data.FieldMetaData("entries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Entry.class))));
      tmpMap.put(_Fields.PROPS, new org.apache.thrift.meta_data.FieldMetaData("props", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(evaluateProperties_args.class, metaDataMap);
    }

    public evaluateProperties_args() {
    }

    public evaluateProperties_args(
      List<Entry> entries,
      List<String> props)
    {
      this();
      this.entries = entries;
      this.props = props;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public evaluateProperties_args(evaluateProperties_args other) {
      if (other.isSetEntries()) {
        List<Entry> __this__entries = new ArrayList<Entry>(other.entries.size());
        for (Entry other_element : other.entries) {
          __this__entries.add(new Entry(other_element));
        }
        this.entries = __this__entries;
      }
      if (other.isSetProps()) {
        List<String> __this__props = new ArrayList<String>(other.props);
        this.props = __this__props;
      }
    }

    public evaluateProperties_args deepCopy() {
      return new evaluateProperties_args(this);
    }

    @Override
    public void clear() {
      this.entries = null;
      this.props = null;
    }

    public int getEntriesSize() {
      return (this.entries == null) ? 0 : this.entries.size();
    }

    public java.util.Iterator<Entry> getEntriesIterator() {
      return (this.entries == null) ? null : this.entries.iterator();
    }

    public void addToEntries(Entry elem) {
      if (this.entries == null) {
        this.entries = new ArrayList<Entry>();
      }
      this.entries.add(elem);
    }

    public List<Entry> getEntries() {
      return this.entries;
    }

    public evaluateProperties_args setEntries(List<Entry> entries) {
      this.entries = entries;
      return this;
    }

    public void unsetEntries() {
      this.entries = null;
    }

    /** Returns true if field entries is set (has been assigned a value) and false otherwise */
    public boolean isSetEntries() {
      return this.entries != null;
    }

    public void setEntriesIsSet(boolean value) {
      if (!value) {
        this.entries = null;
      }
    }

    public int getPropsSize() {
      return (this.props == null) ? 0 : this.props.size();
    }

    public java.util.Iterator<String> getPropsIterator() {
      return (this.props == null) ? null : this.props.iterator();
    }

    public void addToProps(String elem) {
      if (this.props == null) {
        this.props = new ArrayList<String>();
      }
      this.props.add(elem);
    }

    public List<String> getProps() {
      return this.props;
    }

    public evaluateProperties_args setProps(List<String> props) {
      this.props = props;
      return this;
    }

    public void unsetProps() {
      this.props = null;
    }

    /** Returns true if field props is set (has been assigned a value) and false otherwise */
    public boolean isSetProps() {
      return this.props != null;
    }

    public void setPropsIsSet(boolean value) {
      if (!value) {
        this.props = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTRIES:
        if (value == null) {
          unsetEntries();
        } else {
          setEntries((List<Entry>)value);
        }
        break;

      case PROPS:
        if (value == null) {
          unsetProps();
        } else {
          setProps((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTRIES:
        return getEntries();

      case PROPS:
        return getProps();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTRIES:
        return isSetEntries();
      case PROPS:
        return isSetProps();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof evaluateProperties_args)
        return this.equals((evaluateProperties_args)that);
      return false;
    }

    public boolean equals(evaluateProperties_args that) {
      if (that == null)
        return false;

      boolean this_present_entries = true && this.isSetEntries();
      boolean that_present_entries = true && that.isSetEntries();
      if (this_present_entries || that_present_entries) {
        if (!(this_present_entries && that_present_entries))
          return false;
        if (!this.entries.equals(that.entries))
          return false;
      }

      boolean this_present_props = true && this.isSetProps();
      boolean that_present_props = true && that.isSetProps();
      if (this_present_props || that_present_props) {
        if (!(this_present_props && that_present_props))
          return false;
        if (!this.props.equals(that.props))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entries = true && (isSetEntries());
      list.add(present_entries);
      if (present_entries)
        list.add(entries);

      boolean present_props = true && (isSetProps());
      list.add(present_props);
      if (present_props)
        list.add(props);

      return list.hashCode();
    }

    @Override
    public int compareTo(evaluateProperties_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntries()).compareTo(other.isSetEntries());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntries()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entries, other.entries);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetProps()).compareTo(other.isSetProps());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProps()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.props, other.props);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("evaluateProperties_args(");
      boolean first = true;

      sb.append("entries:");
      if (this.entries == null) {
        sb.append("null");
      } else {
        sb.append(this.entries);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("props:");
      if (this.props == null) {
        sb.append("null");
      } else {
        sb.append(this.props);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class evaluateProperties_argsStandardSchemeFactory implements SchemeFactory {
      public evaluateProperties_argsStandardScheme getScheme() {
        return new evaluateProperties_argsStandardScheme();
      }
    }

    private static class evaluateProperties_argsStandardScheme extends StandardScheme<evaluateProperties_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, evaluateProperties_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTRIES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                  struct.entries = new ArrayList<Entry>(_list58.size);
                  Entry _elem59;
                  for (int _i60 = 0; _i60 < _list58.size; ++_i60)
                  {
                    _elem59 = new Entry();
                    _elem59.read(iprot);
                    struct.entries.add(_elem59);
                  }
                  iprot.readListEnd();
                }
                struct.setEntriesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROPS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list61 = iprot.readListBegin();
                  struct.props = new ArrayList<String>(_list61.size);
                  String _elem62;
                  for (int _i63 = 0; _i63 < _list61.size; ++_i63)
                  {
                    _elem62 = iprot.readString();
                    struct.props.add(_elem62);
                  }
                  iprot.readListEnd();
                }
                struct.setPropsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, evaluateProperties_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.entries != null) {
          oprot.writeFieldBegin(ENTRIES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.entries.size()));
            for (Entry _iter64 : struct.entries)
            {
              _iter64.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.props != null) {
          oprot.writeFieldBegin(PROPS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.props.size()));
            for (String _iter65 : struct.props)
            {
              oprot.writeString(_iter65);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class evaluateProperties_argsTupleSchemeFactory implements SchemeFactory {
      public evaluateProperties_argsTupleScheme getScheme() {
        return new evaluateProperties_argsTupleScheme();
      }
    }

    private static class evaluateProperties_argsTupleScheme extends TupleScheme<evaluateProperties_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, evaluateProperties_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntries()) {
          optionals.set(0);
        }
        if (struct.isSetProps()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEntries()) {
          {
            oprot.writeI32(struct.entries.size());
            for (Entry _iter66 : struct.entries)
            {
              _iter66.write(oprot);
            }
          }
        }
        if (struct.isSetProps()) {
          {
            oprot.writeI32(struct.props.size());
            for (String _iter67 : struct.props)
            {
              oprot.writeString(_iter67);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, evaluateProperties_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list68 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.entries = new ArrayList<Entry>(_list68.size);
            Entry _elem69;
            for (int _i70 = 0; _i70 < _list68.size; ++_i70)
            {
              _elem69 = new Entry();
              _elem69.read(iprot);
              struct.entries.add(_elem69);
            }
          }
          struct.setEntriesIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list71 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.props = new ArrayList<String>(_list71.size);
            String _elem72;
            for (int _i73 = 0; _i73 < _list71.size; ++_i73)
            {
              _elem72 = iprot.readString();
              struct.props.add(_elem72);
            }
          }
          struct.setPropsIsSet(true);
        }
      }
    }

  }

  public static class evaluateProperties_result implements org.apache.thrift.TBase<evaluateProperties_result, evaluateProperties_result._Fields>, java.io.Serializable, Cloneable, Comparable<evaluateProperties_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("evaluateProperties_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new evaluateProperties_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new evaluateProperties_resultTupleSchemeFactory());
    }

    public List<Entry> success; // required
    public MagpieException ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Entry.class))));
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(evaluateProperties_result.class, metaDataMap);
    }

    public evaluateProperties_result() {
    }

    public evaluateProperties_result(
      List<Entry> success,
      MagpieException ouch)
    {
      this();
      this.success = success;
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public evaluateProperties_result(evaluateProperties_result other) {
      if (other.isSetSuccess()) {
        List<Entry> __this__success = new ArrayList<Entry>(other.success.size());
        for (Entry other_element : other.success) {
          __this__success.add(new Entry(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetOuch()) {
        this.ouch = new MagpieException(other.ouch);
      }
    }

    public evaluateProperties_result deepCopy() {
      return new evaluateProperties_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ouch = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Entry> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Entry elem) {
      if (this.success == null) {
        this.success = new ArrayList<Entry>();
      }
      this.success.add(elem);
    }

    public List<Entry> getSuccess() {
      return this.success;
    }

    public evaluateProperties_result setSuccess(List<Entry> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public MagpieException getOuch() {
      return this.ouch;
    }

    public evaluateProperties_result setOuch(MagpieException ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Entry>)value);
        }
        break;

      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((MagpieException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof evaluateProperties_result)
        return this.equals((evaluateProperties_result)that);
      return false;
    }

    public boolean equals(evaluateProperties_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(evaluateProperties_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("evaluateProperties_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class evaluateProperties_resultStandardSchemeFactory implements SchemeFactory {
      public evaluateProperties_resultStandardScheme getScheme() {
        return new evaluateProperties_resultStandardScheme();
      }
    }

    private static class evaluateProperties_resultStandardScheme extends StandardScheme<evaluateProperties_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, evaluateProperties_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list74 = iprot.readListBegin();
                  struct.success = new ArrayList<Entry>(_list74.size);
                  Entry _elem75;
                  for (int _i76 = 0; _i76 < _list74.size; ++_i76)
                  {
                    _elem75 = new Entry();
                    _elem75.read(iprot);
                    struct.success.add(_elem75);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new MagpieException();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, evaluateProperties_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Entry _iter77 : struct.success)
            {
              _iter77.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class evaluateProperties_resultTupleSchemeFactory implements SchemeFactory {
      public evaluateProperties_resultTupleScheme getScheme() {
        return new evaluateProperties_resultTupleScheme();
      }
    }

    private static class evaluateProperties_resultTupleScheme extends TupleScheme<evaluateProperties_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, evaluateProperties_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Entry _iter78 : struct.success)
            {
              _iter78.write(oprot);
            }
          }
        }
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, evaluateProperties_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list79 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Entry>(_list79.size);
            Entry _elem80;
            for (int _i81 = 0; _i81 < _list79.size; ++_i81)
            {
              _elem80 = new Entry();
              _elem80.read(iprot);
              struct.success.add(_elem80);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch = new MagpieException();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class searchSingleObjective_args implements org.apache.thrift.TBase<searchSingleObjective_args, searchSingleObjective_args._Fields>, java.io.Serializable, Cloneable, Comparable<searchSingleObjective_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchSingleObjective_args");

    private static final org.apache.thrift.protocol.TField OBJ_FIELD_DESC = new org.apache.thrift.protocol.TField("obj", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField GEN_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("genMethod", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField NUM_TO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("numToList", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchSingleObjective_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchSingleObjective_argsTupleSchemeFactory());
    }

    public String obj; // required
    public String genMethod; // required
    public int numToList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OBJ((short)1, "obj"),
      GEN_METHOD((short)2, "genMethod"),
      NUM_TO_LIST((short)3, "numToList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OBJ
            return OBJ;
          case 2: // GEN_METHOD
            return GEN_METHOD;
          case 3: // NUM_TO_LIST
            return NUM_TO_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMTOLIST_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OBJ, new org.apache.thrift.meta_data.FieldMetaData("obj", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GEN_METHOD, new org.apache.thrift.meta_data.FieldMetaData("genMethod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NUM_TO_LIST, new org.apache.thrift.meta_data.FieldMetaData("numToList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchSingleObjective_args.class, metaDataMap);
    }

    public searchSingleObjective_args() {
    }

    public searchSingleObjective_args(
      String obj,
      String genMethod,
      int numToList)
    {
      this();
      this.obj = obj;
      this.genMethod = genMethod;
      this.numToList = numToList;
      setNumToListIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchSingleObjective_args(searchSingleObjective_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetObj()) {
        this.obj = other.obj;
      }
      if (other.isSetGenMethod()) {
        this.genMethod = other.genMethod;
      }
      this.numToList = other.numToList;
    }

    public searchSingleObjective_args deepCopy() {
      return new searchSingleObjective_args(this);
    }

    @Override
    public void clear() {
      this.obj = null;
      this.genMethod = null;
      setNumToListIsSet(false);
      this.numToList = 0;
    }

    public String getObj() {
      return this.obj;
    }

    public searchSingleObjective_args setObj(String obj) {
      this.obj = obj;
      return this;
    }

    public void unsetObj() {
      this.obj = null;
    }

    /** Returns true if field obj is set (has been assigned a value) and false otherwise */
    public boolean isSetObj() {
      return this.obj != null;
    }

    public void setObjIsSet(boolean value) {
      if (!value) {
        this.obj = null;
      }
    }

    public String getGenMethod() {
      return this.genMethod;
    }

    public searchSingleObjective_args setGenMethod(String genMethod) {
      this.genMethod = genMethod;
      return this;
    }

    public void unsetGenMethod() {
      this.genMethod = null;
    }

    /** Returns true if field genMethod is set (has been assigned a value) and false otherwise */
    public boolean isSetGenMethod() {
      return this.genMethod != null;
    }

    public void setGenMethodIsSet(boolean value) {
      if (!value) {
        this.genMethod = null;
      }
    }

    public int getNumToList() {
      return this.numToList;
    }

    public searchSingleObjective_args setNumToList(int numToList) {
      this.numToList = numToList;
      setNumToListIsSet(true);
      return this;
    }

    public void unsetNumToList() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMTOLIST_ISSET_ID);
    }

    /** Returns true if field numToList is set (has been assigned a value) and false otherwise */
    public boolean isSetNumToList() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMTOLIST_ISSET_ID);
    }

    public void setNumToListIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMTOLIST_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OBJ:
        if (value == null) {
          unsetObj();
        } else {
          setObj((String)value);
        }
        break;

      case GEN_METHOD:
        if (value == null) {
          unsetGenMethod();
        } else {
          setGenMethod((String)value);
        }
        break;

      case NUM_TO_LIST:
        if (value == null) {
          unsetNumToList();
        } else {
          setNumToList((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OBJ:
        return getObj();

      case GEN_METHOD:
        return getGenMethod();

      case NUM_TO_LIST:
        return Integer.valueOf(getNumToList());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OBJ:
        return isSetObj();
      case GEN_METHOD:
        return isSetGenMethod();
      case NUM_TO_LIST:
        return isSetNumToList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchSingleObjective_args)
        return this.equals((searchSingleObjective_args)that);
      return false;
    }

    public boolean equals(searchSingleObjective_args that) {
      if (that == null)
        return false;

      boolean this_present_obj = true && this.isSetObj();
      boolean that_present_obj = true && that.isSetObj();
      if (this_present_obj || that_present_obj) {
        if (!(this_present_obj && that_present_obj))
          return false;
        if (!this.obj.equals(that.obj))
          return false;
      }

      boolean this_present_genMethod = true && this.isSetGenMethod();
      boolean that_present_genMethod = true && that.isSetGenMethod();
      if (this_present_genMethod || that_present_genMethod) {
        if (!(this_present_genMethod && that_present_genMethod))
          return false;
        if (!this.genMethod.equals(that.genMethod))
          return false;
      }

      boolean this_present_numToList = true;
      boolean that_present_numToList = true;
      if (this_present_numToList || that_present_numToList) {
        if (!(this_present_numToList && that_present_numToList))
          return false;
        if (this.numToList != that.numToList)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_obj = true && (isSetObj());
      list.add(present_obj);
      if (present_obj)
        list.add(obj);

      boolean present_genMethod = true && (isSetGenMethod());
      list.add(present_genMethod);
      if (present_genMethod)
        list.add(genMethod);

      boolean present_numToList = true;
      list.add(present_numToList);
      if (present_numToList)
        list.add(numToList);

      return list.hashCode();
    }

    @Override
    public int compareTo(searchSingleObjective_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetObj()).compareTo(other.isSetObj());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObj()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obj, other.obj);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGenMethod()).compareTo(other.isSetGenMethod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGenMethod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.genMethod, other.genMethod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumToList()).compareTo(other.isSetNumToList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumToList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numToList, other.numToList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchSingleObjective_args(");
      boolean first = true;

      sb.append("obj:");
      if (this.obj == null) {
        sb.append("null");
      } else {
        sb.append(this.obj);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("genMethod:");
      if (this.genMethod == null) {
        sb.append("null");
      } else {
        sb.append(this.genMethod);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numToList:");
      sb.append(this.numToList);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchSingleObjective_argsStandardSchemeFactory implements SchemeFactory {
      public searchSingleObjective_argsStandardScheme getScheme() {
        return new searchSingleObjective_argsStandardScheme();
      }
    }

    private static class searchSingleObjective_argsStandardScheme extends StandardScheme<searchSingleObjective_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchSingleObjective_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OBJ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.obj = iprot.readString();
                struct.setObjIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GEN_METHOD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.genMethod = iprot.readString();
                struct.setGenMethodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NUM_TO_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.numToList = iprot.readI32();
                struct.setNumToListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchSingleObjective_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.obj != null) {
          oprot.writeFieldBegin(OBJ_FIELD_DESC);
          oprot.writeString(struct.obj);
          oprot.writeFieldEnd();
        }
        if (struct.genMethod != null) {
          oprot.writeFieldBegin(GEN_METHOD_FIELD_DESC);
          oprot.writeString(struct.genMethod);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NUM_TO_LIST_FIELD_DESC);
        oprot.writeI32(struct.numToList);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchSingleObjective_argsTupleSchemeFactory implements SchemeFactory {
      public searchSingleObjective_argsTupleScheme getScheme() {
        return new searchSingleObjective_argsTupleScheme();
      }
    }

    private static class searchSingleObjective_argsTupleScheme extends TupleScheme<searchSingleObjective_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchSingleObjective_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetObj()) {
          optionals.set(0);
        }
        if (struct.isSetGenMethod()) {
          optionals.set(1);
        }
        if (struct.isSetNumToList()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetObj()) {
          oprot.writeString(struct.obj);
        }
        if (struct.isSetGenMethod()) {
          oprot.writeString(struct.genMethod);
        }
        if (struct.isSetNumToList()) {
          oprot.writeI32(struct.numToList);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchSingleObjective_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.obj = iprot.readString();
          struct.setObjIsSet(true);
        }
        if (incoming.get(1)) {
          struct.genMethod = iprot.readString();
          struct.setGenMethodIsSet(true);
        }
        if (incoming.get(2)) {
          struct.numToList = iprot.readI32();
          struct.setNumToListIsSet(true);
        }
      }
    }

  }

  public static class searchSingleObjective_result implements org.apache.thrift.TBase<searchSingleObjective_result, searchSingleObjective_result._Fields>, java.io.Serializable, Cloneable, Comparable<searchSingleObjective_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchSingleObjective_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchSingleObjective_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchSingleObjective_resultTupleSchemeFactory());
    }

    public List<Entry> success; // required
    public MagpieException ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Entry.class))));
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchSingleObjective_result.class, metaDataMap);
    }

    public searchSingleObjective_result() {
    }

    public searchSingleObjective_result(
      List<Entry> success,
      MagpieException ouch)
    {
      this();
      this.success = success;
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchSingleObjective_result(searchSingleObjective_result other) {
      if (other.isSetSuccess()) {
        List<Entry> __this__success = new ArrayList<Entry>(other.success.size());
        for (Entry other_element : other.success) {
          __this__success.add(new Entry(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetOuch()) {
        this.ouch = new MagpieException(other.ouch);
      }
    }

    public searchSingleObjective_result deepCopy() {
      return new searchSingleObjective_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ouch = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Entry> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Entry elem) {
      if (this.success == null) {
        this.success = new ArrayList<Entry>();
      }
      this.success.add(elem);
    }

    public List<Entry> getSuccess() {
      return this.success;
    }

    public searchSingleObjective_result setSuccess(List<Entry> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public MagpieException getOuch() {
      return this.ouch;
    }

    public searchSingleObjective_result setOuch(MagpieException ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Entry>)value);
        }
        break;

      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((MagpieException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchSingleObjective_result)
        return this.equals((searchSingleObjective_result)that);
      return false;
    }

    public boolean equals(searchSingleObjective_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(searchSingleObjective_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchSingleObjective_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchSingleObjective_resultStandardSchemeFactory implements SchemeFactory {
      public searchSingleObjective_resultStandardScheme getScheme() {
        return new searchSingleObjective_resultStandardScheme();
      }
    }

    private static class searchSingleObjective_resultStandardScheme extends StandardScheme<searchSingleObjective_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchSingleObjective_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list82 = iprot.readListBegin();
                  struct.success = new ArrayList<Entry>(_list82.size);
                  Entry _elem83;
                  for (int _i84 = 0; _i84 < _list82.size; ++_i84)
                  {
                    _elem83 = new Entry();
                    _elem83.read(iprot);
                    struct.success.add(_elem83);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new MagpieException();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchSingleObjective_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Entry _iter85 : struct.success)
            {
              _iter85.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchSingleObjective_resultTupleSchemeFactory implements SchemeFactory {
      public searchSingleObjective_resultTupleScheme getScheme() {
        return new searchSingleObjective_resultTupleScheme();
      }
    }

    private static class searchSingleObjective_resultTupleScheme extends TupleScheme<searchSingleObjective_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchSingleObjective_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Entry _iter86 : struct.success)
            {
              _iter86.write(oprot);
            }
          }
        }
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchSingleObjective_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list87 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Entry>(_list87.size);
            Entry _elem88;
            for (int _i89 = 0; _i89 < _list87.size; ++_i89)
            {
              _elem88 = new Entry();
              _elem88.read(iprot);
              struct.success.add(_elem88);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch = new MagpieException();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

  public static class searchMultiObjective_args implements org.apache.thrift.TBase<searchMultiObjective_args, searchMultiObjective_args._Fields>, java.io.Serializable, Cloneable, Comparable<searchMultiObjective_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchMultiObjective_args");

    private static final org.apache.thrift.protocol.TField P_FIELD_DESC = new org.apache.thrift.protocol.TField("p", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
    private static final org.apache.thrift.protocol.TField OBJS_FIELD_DESC = new org.apache.thrift.protocol.TField("objs", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField GEN_METHOD_FIELD_DESC = new org.apache.thrift.protocol.TField("genMethod", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField NUM_TO_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("numToList", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchMultiObjective_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchMultiObjective_argsTupleSchemeFactory());
    }

    public double p; // required
    public List<String> objs; // required
    public String genMethod; // required
    public int numToList; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P((short)1, "p"),
      OBJS((short)2, "objs"),
      GEN_METHOD((short)3, "genMethod"),
      NUM_TO_LIST((short)4, "numToList");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P
            return P;
          case 2: // OBJS
            return OBJS;
          case 3: // GEN_METHOD
            return GEN_METHOD;
          case 4: // NUM_TO_LIST
            return NUM_TO_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __P_ISSET_ID = 0;
    private static final int __NUMTOLIST_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P, new org.apache.thrift.meta_data.FieldMetaData("p", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.OBJS, new org.apache.thrift.meta_data.FieldMetaData("objs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.GEN_METHOD, new org.apache.thrift.meta_data.FieldMetaData("genMethod", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NUM_TO_LIST, new org.apache.thrift.meta_data.FieldMetaData("numToList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchMultiObjective_args.class, metaDataMap);
    }

    public searchMultiObjective_args() {
    }

    public searchMultiObjective_args(
      double p,
      List<String> objs,
      String genMethod,
      int numToList)
    {
      this();
      this.p = p;
      setPIsSet(true);
      this.objs = objs;
      this.genMethod = genMethod;
      this.numToList = numToList;
      setNumToListIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchMultiObjective_args(searchMultiObjective_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.p = other.p;
      if (other.isSetObjs()) {
        List<String> __this__objs = new ArrayList<String>(other.objs);
        this.objs = __this__objs;
      }
      if (other.isSetGenMethod()) {
        this.genMethod = other.genMethod;
      }
      this.numToList = other.numToList;
    }

    public searchMultiObjective_args deepCopy() {
      return new searchMultiObjective_args(this);
    }

    @Override
    public void clear() {
      setPIsSet(false);
      this.p = 0.0;
      this.objs = null;
      this.genMethod = null;
      setNumToListIsSet(false);
      this.numToList = 0;
    }

    public double getP() {
      return this.p;
    }

    public searchMultiObjective_args setP(double p) {
      this.p = p;
      setPIsSet(true);
      return this;
    }

    public void unsetP() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __P_ISSET_ID);
    }

    /** Returns true if field p is set (has been assigned a value) and false otherwise */
    public boolean isSetP() {
      return EncodingUtils.testBit(__isset_bitfield, __P_ISSET_ID);
    }

    public void setPIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __P_ISSET_ID, value);
    }

    public int getObjsSize() {
      return (this.objs == null) ? 0 : this.objs.size();
    }

    public java.util.Iterator<String> getObjsIterator() {
      return (this.objs == null) ? null : this.objs.iterator();
    }

    public void addToObjs(String elem) {
      if (this.objs == null) {
        this.objs = new ArrayList<String>();
      }
      this.objs.add(elem);
    }

    public List<String> getObjs() {
      return this.objs;
    }

    public searchMultiObjective_args setObjs(List<String> objs) {
      this.objs = objs;
      return this;
    }

    public void unsetObjs() {
      this.objs = null;
    }

    /** Returns true if field objs is set (has been assigned a value) and false otherwise */
    public boolean isSetObjs() {
      return this.objs != null;
    }

    public void setObjsIsSet(boolean value) {
      if (!value) {
        this.objs = null;
      }
    }

    public String getGenMethod() {
      return this.genMethod;
    }

    public searchMultiObjective_args setGenMethod(String genMethod) {
      this.genMethod = genMethod;
      return this;
    }

    public void unsetGenMethod() {
      this.genMethod = null;
    }

    /** Returns true if field genMethod is set (has been assigned a value) and false otherwise */
    public boolean isSetGenMethod() {
      return this.genMethod != null;
    }

    public void setGenMethodIsSet(boolean value) {
      if (!value) {
        this.genMethod = null;
      }
    }

    public int getNumToList() {
      return this.numToList;
    }

    public searchMultiObjective_args setNumToList(int numToList) {
      this.numToList = numToList;
      setNumToListIsSet(true);
      return this;
    }

    public void unsetNumToList() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUMTOLIST_ISSET_ID);
    }

    /** Returns true if field numToList is set (has been assigned a value) and false otherwise */
    public boolean isSetNumToList() {
      return EncodingUtils.testBit(__isset_bitfield, __NUMTOLIST_ISSET_ID);
    }

    public void setNumToListIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUMTOLIST_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case P:
        if (value == null) {
          unsetP();
        } else {
          setP((Double)value);
        }
        break;

      case OBJS:
        if (value == null) {
          unsetObjs();
        } else {
          setObjs((List<String>)value);
        }
        break;

      case GEN_METHOD:
        if (value == null) {
          unsetGenMethod();
        } else {
          setGenMethod((String)value);
        }
        break;

      case NUM_TO_LIST:
        if (value == null) {
          unsetNumToList();
        } else {
          setNumToList((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case P:
        return Double.valueOf(getP());

      case OBJS:
        return getObjs();

      case GEN_METHOD:
        return getGenMethod();

      case NUM_TO_LIST:
        return Integer.valueOf(getNumToList());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case P:
        return isSetP();
      case OBJS:
        return isSetObjs();
      case GEN_METHOD:
        return isSetGenMethod();
      case NUM_TO_LIST:
        return isSetNumToList();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchMultiObjective_args)
        return this.equals((searchMultiObjective_args)that);
      return false;
    }

    public boolean equals(searchMultiObjective_args that) {
      if (that == null)
        return false;

      boolean this_present_p = true;
      boolean that_present_p = true;
      if (this_present_p || that_present_p) {
        if (!(this_present_p && that_present_p))
          return false;
        if (this.p != that.p)
          return false;
      }

      boolean this_present_objs = true && this.isSetObjs();
      boolean that_present_objs = true && that.isSetObjs();
      if (this_present_objs || that_present_objs) {
        if (!(this_present_objs && that_present_objs))
          return false;
        if (!this.objs.equals(that.objs))
          return false;
      }

      boolean this_present_genMethod = true && this.isSetGenMethod();
      boolean that_present_genMethod = true && that.isSetGenMethod();
      if (this_present_genMethod || that_present_genMethod) {
        if (!(this_present_genMethod && that_present_genMethod))
          return false;
        if (!this.genMethod.equals(that.genMethod))
          return false;
      }

      boolean this_present_numToList = true;
      boolean that_present_numToList = true;
      if (this_present_numToList || that_present_numToList) {
        if (!(this_present_numToList && that_present_numToList))
          return false;
        if (this.numToList != that.numToList)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_p = true;
      list.add(present_p);
      if (present_p)
        list.add(p);

      boolean present_objs = true && (isSetObjs());
      list.add(present_objs);
      if (present_objs)
        list.add(objs);

      boolean present_genMethod = true && (isSetGenMethod());
      list.add(present_genMethod);
      if (present_genMethod)
        list.add(genMethod);

      boolean present_numToList = true;
      list.add(present_numToList);
      if (present_numToList)
        list.add(numToList);

      return list.hashCode();
    }

    @Override
    public int compareTo(searchMultiObjective_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetP()).compareTo(other.isSetP());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetP()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.p, other.p);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetObjs()).compareTo(other.isSetObjs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObjs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objs, other.objs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGenMethod()).compareTo(other.isSetGenMethod());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGenMethod()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.genMethod, other.genMethod);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNumToList()).compareTo(other.isSetNumToList());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumToList()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numToList, other.numToList);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchMultiObjective_args(");
      boolean first = true;

      sb.append("p:");
      sb.append(this.p);
      first = false;
      if (!first) sb.append(", ");
      sb.append("objs:");
      if (this.objs == null) {
        sb.append("null");
      } else {
        sb.append(this.objs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("genMethod:");
      if (this.genMethod == null) {
        sb.append("null");
      } else {
        sb.append(this.genMethod);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numToList:");
      sb.append(this.numToList);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchMultiObjective_argsStandardSchemeFactory implements SchemeFactory {
      public searchMultiObjective_argsStandardScheme getScheme() {
        return new searchMultiObjective_argsStandardScheme();
      }
    }

    private static class searchMultiObjective_argsStandardScheme extends StandardScheme<searchMultiObjective_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchMultiObjective_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.p = iprot.readDouble();
                struct.setPIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OBJS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list90 = iprot.readListBegin();
                  struct.objs = new ArrayList<String>(_list90.size);
                  String _elem91;
                  for (int _i92 = 0; _i92 < _list90.size; ++_i92)
                  {
                    _elem91 = iprot.readString();
                    struct.objs.add(_elem91);
                  }
                  iprot.readListEnd();
                }
                struct.setObjsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // GEN_METHOD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.genMethod = iprot.readString();
                struct.setGenMethodIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NUM_TO_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.numToList = iprot.readI32();
                struct.setNumToListIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchMultiObjective_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(P_FIELD_DESC);
        oprot.writeDouble(struct.p);
        oprot.writeFieldEnd();
        if (struct.objs != null) {
          oprot.writeFieldBegin(OBJS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.objs.size()));
            for (String _iter93 : struct.objs)
            {
              oprot.writeString(_iter93);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.genMethod != null) {
          oprot.writeFieldBegin(GEN_METHOD_FIELD_DESC);
          oprot.writeString(struct.genMethod);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NUM_TO_LIST_FIELD_DESC);
        oprot.writeI32(struct.numToList);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchMultiObjective_argsTupleSchemeFactory implements SchemeFactory {
      public searchMultiObjective_argsTupleScheme getScheme() {
        return new searchMultiObjective_argsTupleScheme();
      }
    }

    private static class searchMultiObjective_argsTupleScheme extends TupleScheme<searchMultiObjective_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchMultiObjective_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetP()) {
          optionals.set(0);
        }
        if (struct.isSetObjs()) {
          optionals.set(1);
        }
        if (struct.isSetGenMethod()) {
          optionals.set(2);
        }
        if (struct.isSetNumToList()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetP()) {
          oprot.writeDouble(struct.p);
        }
        if (struct.isSetObjs()) {
          {
            oprot.writeI32(struct.objs.size());
            for (String _iter94 : struct.objs)
            {
              oprot.writeString(_iter94);
            }
          }
        }
        if (struct.isSetGenMethod()) {
          oprot.writeString(struct.genMethod);
        }
        if (struct.isSetNumToList()) {
          oprot.writeI32(struct.numToList);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchMultiObjective_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.p = iprot.readDouble();
          struct.setPIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list95 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.objs = new ArrayList<String>(_list95.size);
            String _elem96;
            for (int _i97 = 0; _i97 < _list95.size; ++_i97)
            {
              _elem96 = iprot.readString();
              struct.objs.add(_elem96);
            }
          }
          struct.setObjsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.genMethod = iprot.readString();
          struct.setGenMethodIsSet(true);
        }
        if (incoming.get(3)) {
          struct.numToList = iprot.readI32();
          struct.setNumToListIsSet(true);
        }
      }
    }

  }

  public static class searchMultiObjective_result implements org.apache.thrift.TBase<searchMultiObjective_result, searchMultiObjective_result._Fields>, java.io.Serializable, Cloneable, Comparable<searchMultiObjective_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchMultiObjective_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField OUCH_FIELD_DESC = new org.apache.thrift.protocol.TField("ouch", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchMultiObjective_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchMultiObjective_resultTupleSchemeFactory());
    }

    public List<Entry> success; // required
    public MagpieException ouch; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      OUCH((short)1, "ouch");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // OUCH
            return OUCH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Entry.class))));
      tmpMap.put(_Fields.OUCH, new org.apache.thrift.meta_data.FieldMetaData("ouch", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchMultiObjective_result.class, metaDataMap);
    }

    public searchMultiObjective_result() {
    }

    public searchMultiObjective_result(
      List<Entry> success,
      MagpieException ouch)
    {
      this();
      this.success = success;
      this.ouch = ouch;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchMultiObjective_result(searchMultiObjective_result other) {
      if (other.isSetSuccess()) {
        List<Entry> __this__success = new ArrayList<Entry>(other.success.size());
        for (Entry other_element : other.success) {
          __this__success.add(new Entry(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetOuch()) {
        this.ouch = new MagpieException(other.ouch);
      }
    }

    public searchMultiObjective_result deepCopy() {
      return new searchMultiObjective_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.ouch = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Entry> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Entry elem) {
      if (this.success == null) {
        this.success = new ArrayList<Entry>();
      }
      this.success.add(elem);
    }

    public List<Entry> getSuccess() {
      return this.success;
    }

    public searchMultiObjective_result setSuccess(List<Entry> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public MagpieException getOuch() {
      return this.ouch;
    }

    public searchMultiObjective_result setOuch(MagpieException ouch) {
      this.ouch = ouch;
      return this;
    }

    public void unsetOuch() {
      this.ouch = null;
    }

    /** Returns true if field ouch is set (has been assigned a value) and false otherwise */
    public boolean isSetOuch() {
      return this.ouch != null;
    }

    public void setOuchIsSet(boolean value) {
      if (!value) {
        this.ouch = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Entry>)value);
        }
        break;

      case OUCH:
        if (value == null) {
          unsetOuch();
        } else {
          setOuch((MagpieException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case OUCH:
        return getOuch();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case OUCH:
        return isSetOuch();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchMultiObjective_result)
        return this.equals((searchMultiObjective_result)that);
      return false;
    }

    public boolean equals(searchMultiObjective_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_ouch = true && this.isSetOuch();
      boolean that_present_ouch = true && that.isSetOuch();
      if (this_present_ouch || that_present_ouch) {
        if (!(this_present_ouch && that_present_ouch))
          return false;
        if (!this.ouch.equals(that.ouch))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_ouch = true && (isSetOuch());
      list.add(present_ouch);
      if (present_ouch)
        list.add(ouch);

      return list.hashCode();
    }

    @Override
    public int compareTo(searchMultiObjective_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOuch()).compareTo(other.isSetOuch());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOuch()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ouch, other.ouch);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchMultiObjective_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ouch:");
      if (this.ouch == null) {
        sb.append("null");
      } else {
        sb.append(this.ouch);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchMultiObjective_resultStandardSchemeFactory implements SchemeFactory {
      public searchMultiObjective_resultStandardScheme getScheme() {
        return new searchMultiObjective_resultStandardScheme();
      }
    }

    private static class searchMultiObjective_resultStandardScheme extends StandardScheme<searchMultiObjective_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchMultiObjective_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list98 = iprot.readListBegin();
                  struct.success = new ArrayList<Entry>(_list98.size);
                  Entry _elem99;
                  for (int _i100 = 0; _i100 < _list98.size; ++_i100)
                  {
                    _elem99 = new Entry();
                    _elem99.read(iprot);
                    struct.success.add(_elem99);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // OUCH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.ouch = new MagpieException();
                struct.ouch.read(iprot);
                struct.setOuchIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchMultiObjective_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Entry _iter101 : struct.success)
            {
              _iter101.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.ouch != null) {
          oprot.writeFieldBegin(OUCH_FIELD_DESC);
          struct.ouch.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchMultiObjective_resultTupleSchemeFactory implements SchemeFactory {
      public searchMultiObjective_resultTupleScheme getScheme() {
        return new searchMultiObjective_resultTupleScheme();
      }
    }

    private static class searchMultiObjective_resultTupleScheme extends TupleScheme<searchMultiObjective_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchMultiObjective_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetOuch()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Entry _iter102 : struct.success)
            {
              _iter102.write(oprot);
            }
          }
        }
        if (struct.isSetOuch()) {
          struct.ouch.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchMultiObjective_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list103 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Entry>(_list103.size);
            Entry _elem104;
            for (int _i105 = 0; _i105 < _list103.size; ++_i105)
            {
              _elem104 = new Entry();
              _elem104.read(iprot);
              struct.success.add(_elem104);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ouch = new MagpieException();
          struct.ouch.read(iprot);
          struct.setOuchIsSet(true);
        }
      }
    }

  }

}
